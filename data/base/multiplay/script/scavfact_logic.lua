-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for

fac1 = nil

-- Build Templates

-- groups
attackGroup = Group()
newDroid = nil
droid = nil

-- attacking
structure = nil
attacker = nil
lastAttack = 0



function startLevel()
	fac1 = getStructure(factory, enemy1)
	if fac1 ~= nil then
		buildDroid(trike, fac1, enemy1, 1)
	end
end
callbackEvent(startLevel, CALL_START_NEXT_LEVEL)

-- deal with a droid being built by us
function droidbuilt(_newDroid, _fac1)
	if _newDroid.player ~= enemy1 then return end
	newDroid, fac1 = _newDroid, _fac1 -- wz2lua: probably these can be used as function arguments directly
	local Fact1State = 0
	
	groupAddDroid(attackGroup, newDroid)
	
	-- Build another
	if fac1 ~= nil then
		if structureIdle(fac1) and (numDroidsInArea(enemy1, 0, 0, (C.mapWidth * 128), (C.mapHeight * 128)) < maxDroids) then
			Fact1State = random(10)
			
			if Fact1State == 0 then
				buildDroid(trike, fac1, enemy1, 1)
			else
				if Fact1State == 1 then
					buildDroid(buggy, fac1, enemy1, 1)
				else
					if Fact1State == 2 then
						buildDroid(jeep, fac1, enemy1, 1)
					else
						if Fact1State == 3 then
							buildDroid(cannonbus, fac1, enemy1, 1)
						else
							if Fact1State == 4 then
								buildDroid(firebus, fac1, enemy1, 1)
							else
								buildDroid(bloke, fac1, enemy1, 1)
							end
						end
					end
				end
			end
		end
	end
end
callbackEvent(droidbuilt, CALL_NEWDROID)

-- watch for structures being attacked. Send the cavalry as required.
function structureAttacked(_structure, _attacker)
	if _structure.player ~= enemy1 then return end
	structure, attacker = _structure, _attacker -- wz2lua: probably these can be used as function arguments directly
	if (C.gameTime - lastAttack) > 300 then
		lastAttack = C.gameTime
		orderGroupLoc(attackGroup, DORDER_MOVE, structure.x, structure.y)
	end
end
callbackEvent(structureAttacked, CALL_STRUCT_ATTACKED)

-- Startup
function startup()
	if not scavengersActive() or not myResponsibility(enemy1) then
		deactivateEvent(startLevel)
		deactivateEvent(droidbuilt)
		deactivateEvent(structureAttacked)
	end
	lastAttack = 0
	
	groupAddArea(attackGroup, enemy1, 0, 0, (C.mapWidth * 128), (C.mapHeight * 128))
end
callbackEvent(startup, CALL_GAMEINIT)


---------- stubs ----------

if orderGroupLoc == nil then orderGroupLoc = function() print("stub: orderGroupLoc"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if getStructure == nil then getStructure = function() print("stub: getStructure"); return 0 end end
if myResponsibility == nil then myResponsibility = function() print("stub: myResponsibility"); return 0 end end
if structureIdle == nil then structureIdle = function() print("stub: structureIdle"); return 0 end end
if random == nil then random = function() print("stub: random"); return 0 end end
if numDroidsInArea == nil then numDroidsInArea = function() print("stub: numDroidsInArea"); return 0 end end
if scavengersActive == nil then scavengersActive = function() print("stub: scavengersActive"); return 0 end end
if groupAddDroid == nil then groupAddDroid = function() print("stub: groupAddDroid"); return 0 end end
if buildDroid == nil then buildDroid = function() print("stub: buildDroid"); return 0 end end
if groupAddArea == nil then groupAddArea = function() print("stub: groupAddArea"); return 0 end end
