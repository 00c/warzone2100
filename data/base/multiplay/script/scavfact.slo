// Scavenger MultiPlayer Factory (one) Script

/* aims.

x build upto x droids of y types
x add each new droid to the buildgroup
+ if buildgroup has x droids, send off to wander/attack enemy stuff
x when sending a group, remove the droids from it
x Groups attack things that come into range
x when a friendly structure is attacked send group to attack back
+ wandering likes oil resources, especially those with derricks
 */


// scavenger values
public		int		enemy1;
public		int		maxDroids;

public		STRUCTURESTAT	factory;
private		STRUCTURE	fac1;

// Build Templates 
public		TEMPLATE	trike;
public		TEMPLATE	buggy;
public		TEMPLATE	bloke;
public		TEMPLATE	jeep;

// groups
private		GROUP		attackGroup;
private		DROID		newDroid, droid;

// attacking 
private		STRUCTURE	structure;
private		BASEOBJ		attacker;
private		INT		lastAttack;

#region triggers

trigger chainloadTr(wait, 1);

event structureAttacked;
event startup;
event droidbuilt;
event startLevel;

#endregion triggers

event startLevel(CALL_START_NEXT_LEVEL)
{
	fac1 = getStructure(factory, enemy1);
	if (fac1 != NULLOBJECT)
	{
		buildDroid(trike, fac1, enemy1, 1);
	}
}

// Startup
event startup(init)
{
	if (!scavengersActive() or !myResponsibility(enemy1))
	{
		setEventTrigger(startLevel, inactive);
		setEventTrigger(droidbuilt, inactive);
		setEventTrigger(structureAttacked, inactive);
	}
	lastAttack = 0;

	groupAddArea(attackGroup, enemy1, 0, 0, (mapWidth * 128), (mapHeight * 128));
}

// deal with a droid being built by us
event droidbuilt(CALL_NEWDROID, enemy1, ref newDroid, ref fac1)
{
	local int Fact1State;

	groupAddDroid(attackGroup, newDroid);

	// Build another
	if (fac1 != NULLOBJECT)
	{
		if (structureIdle(fac1) and (numDroidsInArea(enemy1, 0, 0, (mapWidth * 128), (mapHeight * 128)) < maxDroids))
		{
			Fact1State = random(6);

			if (Fact1State == 0)
			{
				buildDroid(trike, fac1, enemy1, 1);
			}
			else if (Fact1State == 1)
			{
				buildDroid(buggy, fac1, enemy1, 1);
			}
			else if (Fact1State == 2)
			{
				buildDroid(jeep, fac1, enemy1, 1);
			}
			else
			{
				buildDroid(bloke, fac1, enemy1, 1);
			}
		}
	}
}

// watch for structures being attacked. Send the cavalry as required.
event structureAttacked(CALL_STRUCT_ATTACKED, enemy1, ref structure, ref attacker)
{
	if ((gameTime - lastAttack) > 300)
	{
		lastAttack = gameTime;
		orderGroupLoc(attackGroup, DORDER_MOVE, structure.x, structure.y);
	}
}

