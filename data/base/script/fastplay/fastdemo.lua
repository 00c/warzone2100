-- Generated by wz2lua (data file)
version(0) -- version of the script API this script is written for
-- slo: "fastdemo.slo"

-- Generic VLO file template
-- for demo map version of fastplay level

-- Next level stuff
-- points to next level
NextLev = "SUBDEMO_START"

-- Define Players/Enemies
-- MAX 2. Must define same as number of enemy players given next
numEnemies = 1
enemy = {}
enemy[0] = 7
-- enemy[1]	int		1
-- TRUE if want enemies to ally, otherwise mark FALSE
allianceFlag = false

-- Starting Enemy Power
-- starting power values for each enemy listed above
power = {}
power[0] = 300

-- Structure Limits
-- MAX 5. Must be same as number of limits given next
numStrucStats = 5
strucStat = {}
strucStat[0] = "A0PowerGenerator"
strucLimit = {}
strucLimit[0] = 1
strucStat[1] = "A0ResourceExtractor"
strucLimit[1] = 200
strucStat[2] = "A0ResearchFacility"
strucLimit[2] = 5
strucStat[3] = "A0LightFactory"
strucLimit[3] = 5
strucStat[4] = "A0CommandCentre"
strucLimit[4] = 1

-- Initialisation
-- starting view centre (in world units)
centreX = 1088
centreY = 6592
-- scroll limits (in tile units)
scrollX1 = 0
scrollY1 = 0
scrollX2 = 64
scrollY2 = 64
-- starting radar: 0=zoomed out, 2=zoomed in
zoomLevel = 1

-- MAX 8. Number of Landing zones/areas can't build on (0 = LZ)
numLZ = 1
-- coords of LZs in tile units
LZX = {}
LZX[0] = 5
LZY = {}
LZY[0] = 54

-- starting technology for enemy
-- NOTE: need to set first number in array for enemy player
-- second number needs to correspond to numTechs[enemy]
-- MAX 2 enemies, 10 technologies
numTechs = {}
numTechs[0] = 0
startTech = {}
startTech[0] = {}
startTech[0][0] = "R-Wpn-MG-Damage03"
startTech[0][1] = "R-Wpn-Rocket-Damage02"
--[[numTechs[1]	int		3
startTech[1][0]	RESEARCHSTAT	"R-Vehicle-Body01"
startTech[1][1]	RESEARCHSTAT	"R-Sys-Spade1Mk1"
startTech[1][2]	RESEARCHSTAT	"R-Vehicle-Prop-Wheels"
//startTech[1][3]	RESEARCHSTAT	"R-Wpn-MG1Mk1"	//done as makeComponent available!]]--

-- Briefings
-- MAX 2. Needs to be same as the number of briefings given next
numBriefs = 1
brief = {}
brief[0] = "MBDEMO_MSG"
-- brief[1]	INTMESSAGE	"MB1C2_MSG"
endMsg = "END"
winMsg = "WIN"

-- Objectives
-- MAX 3. Needs to be the same as the number of objective blips given next
numObjectives = 1
objective = {}
objective[0] = "FAST_OBJ1"
-- doesn't use index to array, use world coords
objectiveX = {}
objectiveX[0] = 1728
objectiveY = {}
objectiveY[0] = 1216

-- Victory Conditions
-- NOTE: always assumes vcitory condition of: number of artifacts collected = victoryArt
-- number of victory conditions to be met (not including artifacts)
numVictory = 1
-- DOESN'T need to be same as number given next (these are set TRUE/FALSE)
-- if victory condition required. Can have 2 set to TRUE and numVictory = 1
-- This will then let player win if EITHER condition is true!
-- all enemy vehicles and structures need to be killed
victory = {}
victory[0] = true
-- all players vehicles at landing zone (in transport?)
victory[1] = false

-- Artifacts
-- number of artifacts required for victory (must be <= numArt)
victoryArt = 5
-- MAX 6. Number of artifacts in total (even if not in game, but added as extra research!)
numArt = 5

-- new improved way of doing artifacts
-- artType: 0 = artifact starts on map, 1 = get from STRUCTURE, 2 = get from FEATURE, 3 = get from DROID, 4 = at end of level
-- artVal: index to relevant type, ie FEATURE(crate), FEATURE, STRUCTURE, DROID
-- artX, artY: artifact coords (this is updated for DROIDS moving by script, but still needs an array to store them in!)
-- already on map
artType = {}
artType[0] = 0
artVal = {}
artVal[0] = 0
artX = {}
artX[0] = 576
artY = {}
artY[0] = 3008
artComp = {}
artComp[0] = "R-Wpn-Flamer01Mk1"

artType[1] = 1
-- get this from base 1 factory
artVal[1] = 0
artX[1] = 3136
artY[1] = 832
artComp[1] = "R-Defense-Tower01"

artType[2] = 1
-- get this from radar tower
artVal[2] = 1
artX[2] = 4416
artY[2] = 2752
artComp[2] = "R-Sys-Sensor-Turret01"

artType[3] = 1
-- get this from base 2 factory
artVal[3] = 2
artX[3] = 5696
artY[3] = 1856
-- "R-Sys-Engineering01"
artComp[3] = "R-Vehicle-Prop-Halftracks"

--[[artType	[4]	int		1
artVal	[4]	int		3				//get this from base 3 factory
artX	[4]	int		4928
artY	[4]	int		6464
artComp	[4]	RESEARCHSTAT	"R-Wpn-Mortar01Lt"]]--

-- get this from bunker
artType[4] = 1
artVal[4] = 4
artX[4] = 3136
artY[4] = 3904
-- "R-Wpn-MG-Damage01"
artComp[4] = "R-Sys-Engineering01"

-- lists of stuff referred to by index number
-- features (inc crates, by ID number)	MAX = 10
-- crate artifact (1st in valley)
features = {}
features[0] = 649
-- features	[1]	FEATURE		661		//crate artifact (2nd by huts) (CHANGED TO BUNKER)

-- structures (by ID number)		MAX = 10
-- Base 1 Factory
structures = {}
structures[0] = getStructureByID(223)
-- radar Tower
structures[1] = getStructureByID(650)
-- Base 2 Factory
structures[2] = getStructureByID(481)
-- Base 3 Factory
structures[3] = getStructureByID(623)
-- Bunker
structures[4] = getStructureByID(666)

-- droids (by ID number)			MAX = 10
-- droids		[0]	DROID		3279		//testdroid

-- list of templates (by name)		 MAX = 20
-- Truck template is always in position 0?
templates = {}
templates[0] = "BaBaPeople"

-- scavenger templates
templates[1] = "BarbarianTrike"
templates[2] = "BarbarianBuggy"
templates[3] = "BabaJeep"
templates[4] = "BabaRKJeep"
templates[5] = "BarbarianRKBuggy"
templates[6] = "BabaBusCan"
templates[7] = "BabaFireCan"

-- coordinates (world coords)		MAX = 10
-- base 1 Assembly
coordsX = {}
coordsX[0] = 3136
coordsY = {}
coordsY[0] = 1472
-- base 2 Assembly (and valley group retreat!)
coordsX[1] = 5824
coordsY[1] = 2368
-- base 3 Assembly
coordsX[2] = 5184
coordsY[2] = 6592

-- 1088		//valley group attack coords (player base)
coordsX[3] = 832
-- 6208
coordsY[3] = 6848

-- valley group 2nd coord so can reinforce
coordsX[4] = 1856
coordsY[4] = 7104

-- hillgroup waypoint1
coordsX[5] = 2624
coordsY[5] = 5952
-- hillgroup waypoint2
coordsX[6] = 2752
coordsY[6] = 6720
-- hillgroup waypoint3
coordsX[7] = 2496
coordsY[7] = 7488
-- hillgroup waypoint4
coordsX[8] = 1728
coordsY[8] = 7744


-- regions (world coords)		MAX = 20
-- enemy base1 blip
regionsX1 = {}
regionsX1[0] = 2624
regionsY1 = {}
regionsY1[0] = 448
regionsX2 = {}
regionsX2[0] = 3648
regionsY2 = {}
regionsY2[0] = 1344
-- enemy base2 blip
regionsX1[1] = 4800
regionsY1[1] = 1472
regionsX2[1] = 6464
regionsY2[1] = 2880
-- enemy base3 blip
regionsX1[2] = 4288
regionsY1[2] = 5952
regionsX2[2] = 6208
regionsY2[2] = 7488

-- base 1 Factory start
regionsX1[3] = 320
-- crossed by 1st derrick
regionsY1[3] = 4160
regionsX2[3] = 2368
regionsY2[3] = 5184
-- base 2 Factory start
regionsX1[4] = 1984
-- round first corner near base1
regionsY1[4] = 832
regionsX2[4] = 3008
regionsY2[4] = 2368
-- base 3 Factory start
regionsX1[5] = 3904
-- crossed by radar tower
regionsY1[5] = 2496
regionsX2[5] = 5312
regionsY2[5] = 4288

-- region group 0 (along valley)
regionsX1[6] = 704
regionsY1[6] = 4544
-- include guys on hill!
regionsX2[6] = 1728
regionsY2[6] = 4800
-- region group 1
regionsX1[7] = 576
regionsY1[7] = 4032
regionsX2[7] = 1728
regionsY2[7] = 4543
-- region group 2
regionsX1[8] = 576
regionsY1[8] = 3136
regionsX2[8] = 1216
regionsY2[8] = 4032
-- region group 3
regionsX1[9] = 576
regionsY1[9] = 1728
regionsX2[9] = 1600
regionsY2[9] = 4032
-- region group 4
regionsX1[10] = 704
regionsY1[10] = 704
regionsX2[10] = 2112
regionsY2[10] = 1728

-- region group 5 (radar defenders)
regionsX1[11] = 1728
regionsY1[11] = 320
regionsX2[11] = 6208
regionsY2[11] = 3904
-- protect region group 5 (radar object)
regionsX1[12] = 4032
regionsY1[12] = 2368
regionsX2[12] = 4800
regionsY2[12] = 3136


-- Enemy Base Blips

-- MAX = 5. Must be same as number of bases listed next
numBases = 4
-- enemy player number who owns base
basePlayer = {}
basePlayer[0] = 7
-- enemy base blip message (prox.txt)
baseMsg = {}
baseMsg[0] = "FAST_BASE1"
-- index to regions
baseRegion = {}
baseRegion[0] = 0
-- index to baseSnd	Superior Weapons
baseWav1 = {}
baseWav1[0] = 2
-- index to baseSnd	Eradicated
baseWav2 = {}
baseWav2[0] = 3

basePlayer[1] = 7
baseMsg[1] = "FAST_BASE2"
baseRegion[1] = 1
-- index to baseSnd	enemy detected
baseWav1[1] = 0
-- index to baseSnd	Eradicated
baseWav2[1] = 3

basePlayer[2] = 7
baseMsg[2] = "FAST_BASE3"
baseRegion[2] = 2
-- index to baseSnd	Superior Weapons
baseWav1[2] = 2
-- index to baseSnd	Eradicated
baseWav2[2] = 3

-- do radar as a base
basePlayer[3] = 7
baseMsg[3] = "FAST_BASE4"
baseRegion[3] = 12
-- index to baseSnd	Threat to project
baseWav1[3] = 1
-- -1 = no sound
baseWav2[3] = -1

-- Enemy Groups
-- group MAX = 10
numGroups = 7
-- 5 valley groups timed 10seconds apart to attack player's base
-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType = {}
grpType[0] = 0
-- player number (NP)
grpPlayer = {}
grpPlayer[0] = 7
-- index in regions array
grpRegion = {}
grpRegion[0] = 6
-- 10s. (always make >= 0 for defence forces)
grpTimeGo = {}
grpTimeGo[0] = 1
-- index in regions array as trigger
grpRegionGo = {}
grpRegionGo[0] = -1
-- player number to cross trigger region (may not need?)
grpWhoGo = {}
grpWhoGo[0] = 0
-- don't set morale/leadership/retreat
grpMorale = {}
grpMorale[0] = 90
-- leadership value
grpLeadership = {}
grpLeadership[0] = 50
-- retreat to base 1 assembly
grpRetreatXY = {}
grpRetreatXY[0] = 0
-- index in coords/sectors array (depends on grpType)
grpPosStart = {}
grpPosStart[0] = 3
-- Minimum index in coords array
grpPosMin = {}
grpPosMin[0] = 3
-- Maximum index in coords array
grpPosMax = {}
grpPosMax[0] = 3
-- Step increase for next 'waypoint'
grpPosStep = {}
grpPosStep[0] = 0
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType = {}
grpPosType[0] = 0
-- index factory to reinforce group. -1 = any factory.
grpFactory = {}
grpFactory[0] = -1
-- ideal size. If less than this factory will reinforce
grpIdealSize = {}
grpIdealSize[0] = 0

-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType[1] = 0
-- player number (NP)
grpPlayer[1] = 7
-- index in regions array
grpRegion[1] = 7
-- 20s time trigger (always make >= 0 for defence forces)
grpTimeGo[1] = 2
-- no region. index in regions array as trigger
grpRegionGo[1] = -1
-- player number to cross trigger region (may not need?)
grpWhoGo[1] = 0
-- very timid! morale = 1%
grpMorale[1] = 90
-- leadership value
grpLeadership[1] = 50
-- retreat (index in coords array) base1 assembly
grpRetreatXY[1] = 0
-- index in sectors array (depends on grpType)
grpPosStart[1] = 3
-- Minimum index in coords array
grpPosMin[1] = 3
-- Maximum index in coords array
grpPosMax[1] = 3
-- Step increase for next 'waypoint'
grpPosStep[1] = 0
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType[1] = 0
-- index structure to reinforce group. -1 = any factory.
grpFactory[1] = -1
-- ideal size. If less than this factory will reinforce
grpIdealSize[1] = 0

-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType[2] = 0
-- player number (NP)
grpPlayer[2] = 7
-- index in regions array
grpRegion[2] = 8
-- 0s time trigger (always make >= 0 for defence forces)
grpTimeGo[2] = 3
-- no region. index in regions array as trigger
grpRegionGo[2] = -1
-- player number to cross trigger region (may not need?)
grpWhoGo[2] = 0
-- morale = 25%
grpMorale[2] = 90
-- leadership value = 75%
grpLeadership[2] = 50
-- retreat (index in coords array) base2 assembly
grpRetreatXY[2] = 1
-- index in coords array (depends on grpType)
grpPosStart[2] = 3
-- Minimum index in coords array
grpPosMin[2] = 3
-- Maximum index in coords array
grpPosMax[2] = 4
-- Step increase for next 'waypoint'
grpPosStep[2] = 1
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType[2] = 1
-- index factory to reinforce group. -1 = any factory.
grpFactory[2] = 0
-- ideal size. If less than this factory will reinforce
grpIdealSize[2] = 2

-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType[3] = 0
-- player number (NP)
grpPlayer[3] = 7
-- index in regions array
grpRegion[3] = 9
-- 10s time trigger (always make >= 0 for defence forces)
grpTimeGo[3] = 4
-- no region. index in regions array as trigger
grpRegionGo[3] = -1
-- player number to cross trigger region (may not need?)
grpWhoGo[3] = 0
-- pretty timid! morale = 25%
grpMorale[3] = 90
-- leadership value = 0%
grpLeadership[3] = 50
-- retreat (index in coords array) base 2 assembly
grpRetreatXY[3] = 1
-- index in coords array (depends on grpType)
grpPosStart[3] = 3
-- Minimum index in coords array
grpPosMin[3] = 3
-- Maximum index in coords array
grpPosMax[3] = 4
-- Step increase for next 'waypoint'
grpPosStep[3] = 1
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType[3] = 1
-- index factory to reinforce group. -1 = any factory.
grpFactory[3] = 1
-- ideal size. If less than this factory will reinforce
grpIdealSize[3] = 4

-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType[4] = 0
-- player number (NP)
grpPlayer[4] = 7
-- index in regions array
grpRegion[4] = 10
-- 20s time trigger (always make >= 0 for defence forces)
grpTimeGo[4] = 5
-- no region. index in regions array as trigger
grpRegionGo[4] = -1
-- player number to cross trigger region (may not need?)
grpWhoGo[4] = 0
-- morale = 50%
grpMorale[4] = 90
-- leadership value = 75%
grpLeadership[4] = 50
-- retreat (index in coords array) base2 assembly
grpRetreatXY[4] = 1
-- index in coords array (depends on grpType)
grpPosStart[4] = 3
-- Minimum index in coords array
grpPosMin[4] = 3
-- Maximum index in coords array
grpPosMax[4] = 4
-- Step increase for next 'waypoint'
grpPosStep[4] = 1
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType[4] = 1
-- index factory to reinforce group. -1 = any factory.
grpFactory[4] = -1
-- ideal size. If less than this factory will reinforce
grpIdealSize[4] = 6

-- radar tower defenders
-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType[5] = 1
-- player number (NP)
grpPlayer[5] = 7
-- index in regions array
grpRegion[5] = 11
-- 20s time trigger (always make >= 0 for defence forces)
grpTimeGo[5] = 0
-- index in regions array as protect region
grpRegionGo[5] = 12
-- player number to cross trigger region (may not need?)
grpWhoGo[5] = 0
-- morale = 50%
grpMorale[5] = 25
-- leadership value = 75%
grpLeadership[5] = 50
-- retreat (index in coords array) base2 assembly
grpRetreatXY[5] = 1
-- -1 = no waypoints. index in coords array (depends on grpType)
grpPosStart[5] = -1
-- Minimum index in coords array
grpPosMin[5] = -1
-- Maximum index in coords array
grpPosMax[5] = -1
-- Step increase for next 'waypoint'
grpPosStep[5] = 0
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType[5] = 0
-- index factory to reinforce group. -1 = any factory.
grpFactory[5] = 0
-- ideal size. If less than this factory will reinforce
grpIdealSize[5] = 0

-- hillgroup
-- 0 = Ambush/Patrol, 1 = Defence, 2 = Scout, 3 = Attack...
grpType[6] = 0
-- player number (NP)
grpPlayer[6] = 7
-- index in regions array (same as base region)
grpRegion[6] = 2
-- 20s time trigger (always make >= 0 for defence forces)
grpTimeGo[6] = -1
-- no region. index in regions array as trigger
grpRegionGo[6] = 5
-- player number to cross trigger region (may not need?)
grpWhoGo[6] = 0
-- morale = 50%
grpMorale[6] = 90
-- leadership value = 75%
grpLeadership[6] = 50
-- retreat (index in coords array) base3 assembly
grpRetreatXY[6] = 2
-- index in coords array (depends on grpType)
grpPosStart[6] = 5
-- Minimum index in coords array
grpPosMin[6] = 5
-- Maximum index in coords array
grpPosMax[6] = 8
-- Step increase for next 'waypoint'
grpPosStep[6] = 1
-- 0 = stop, 1 = loop, 2 = pingpong, 3 = random thru waypoints
grpPosType[6] = 2
-- index factory to reinforce group. -1 = any factory.
grpFactory[6] = 2
-- ideal size. If less than this factory will reinforce
grpIdealSize[6] = 3

-- Factories
-- MAX = 10
numFactories = 3
-- index to structures
factID = {}
factID[0] = 0
-- index to assembly point. -1 for don't set
factAssXY = {}
factAssXY[0] = 0
-- delay before starting production in 10s
factTimeGo = {}
factTimeGo[0] = -1
-- -1 = no region for trigger (assume WhoGo = 0)
factRegionGo = {}
factRegionGo[0] = 3
-- index to starting template
factTempMin = {}
factTempMin[0] = 0
-- index to maximum template
factTempMax = {}
factTempMax[0] = 2

-- index to structures
factID[1] = 2
-- index to assembly point. -1 for don't set
factAssXY[1] = 1
-- delay before starting production in 10s
factTimeGo[1] = -1
-- -1 = no region for trigger (assume WhoGo = 0)
factRegionGo[1] = 4
-- index to starting template
factTempMin[1] = 0
-- index to maximum template
factTempMax[1] = 3

-- index to structures
factID[2] = 3
-- index to assembly point. -1 for don't set
factAssXY[2] = 2
-- delay before starting production in 10s
factTimeGo[2] = -1
-- -1 = no region for trigger (assume WhoGo = 0)
factRegionGo[2] = 5
-- index to starting template
factTempMin[2] = 1
-- index to maximum template
factTempMax[2] = 4

-- 'Globals'
-- These should be same in each file, but may need slight alterations
-- player's player number
player = 0
crate = "Crate"
-- 171				//range to artifact about 1.5 tiles
artRange = 200
-- range to objective 5 Tiles
objectiveRange = 640
-- range to waypoint 2ish tiles
wayRange = 300
-- range for target spotting
targetRange = 768
-- maximum number of targets to store for each enemy
targetMax = 4
-- mission done
wonSnd = "pcv460.ogg"
-- mission failed
lostSnd = "pcv470.ogg"
-- Base Under Attack
attackSnd1 = "pcv337.ogg"
-- artifact sounds
artSnd1 = "pcv351.ogg"
artSnd2 = "pcv352.ogg"

-- base WAVs. MAX = 5
-- Enemy Base Detected
baseSnd = {}
baseSnd[0] = "pcv379.ogg"
-- threat to project
baseSnd[1] = "pcv374.ogg"
-- superior weapons
baseSnd[2] = "pcv374.ogg"
-- scavenger outpost eradicated
baseSnd[3] = "pcv392.ogg"

--run the code
dofile('fastdemo_logic.lua')
