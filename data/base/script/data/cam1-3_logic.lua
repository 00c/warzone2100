-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
numart = 0

newDroidFactory = nil

-- structure limit stuff
-- public	STRUCTURESTAT		powerModuleHack;

-- Win or lose
allPlayer = Group()
nearLZ = Group()
totDroids = 0

-- Base Under Attack Stuff
hitStruc = nil
hitDroid = nil
attackerObj = nil
attackedObj = nil
t = 0

-- Transport Entry/Exit coords

-- Briefing stuff
-- , winMsg;
-- LZ Message
transOnMap = false

-- Proximity: Resources
--[[public		FEATURE		res1;
public		INTMESSAGE	res1Msg;
public		SOUND		res1Snd;
public		STRUCTURESTAT	derrick;
private		int		res1x,res1y;	//temp values to cope with oil disappearing!]]--

-- Proximity: Artifacts

-- public		INTMESSAGE	art1Msg;
art1ID = nil

-- public		INTMESSAGE	art2Msg;
art2ID = nil

-- public		INTMESSAGE	art3Msg;
art3ID = nil

-- public		INTMESSAGE	art4Msg;
art4ID = nil

-- player Bonus Research topics given at end of mission
-- need to be declared with value >= numResP0, numResP1, etc.
count = 0

-- Proximity: Enemy




-- AI STUFF

-- enemy1 variables
enemy1Build = Group()
enemy1Attack = Group()
enemy1Start = Group()
enemy1Fin = Group()
enemy1Force1 = Group()
enemy1Force2 = Group()
enemy2Build = Group()
enemy2Attack = Group()
enemy2Start = Group()
enemy2Fin = Group()
enemy1Guard = Group()
enemy2Guard = Group()
enemy1West = Group()
enemy1North = Group()
enemy1South = Group()
enemy1Hill = Group()
enemy1Scout = Group()
enemy1Defend = Group()
enemy2Defend = Group()
scout1 = Group()
strike1 = Group()
strike2 = Group()
tempx1 = 0
tempx2 = 0
tempy1 = 0
tempy2 = 0

--[[public		INT		rBlkX,rBlkY;
public		INT		oilPatchX,oilPatchY;
public		INT		playerX,playerY;
private		BOOL		oilWellClear;]]--

attackedStruct = nil
attacker = nil

-- temporary variables
newDroid = nil
moveX = 0
moveY = 0
xdiff = 0
ydiff = 0
-- default leadership for enemy2
ld = 0

-- values for build lists start here
-- General Values
-- limit build to this number
-- limit build to this number

-- Enemy Tactics


-- enemy1
enm1Fact1State = 0
enm1Fact1Destroyed = false

-- enemy2
enm2Fact1State = 0
enm2Fact2State = 0
enm2Fact1Destroyed = false
enm2Fact2Destroyed = false

-- Sectors to check
--[[public		int		numBaseSects;
public		int		baseSectX1[8], baseSectY1[8], baseSectX2[8], baseSectY2[8];]]--
bs = 0
bs1 = 0
bsX = 0
bsY = 0
randNum = 0
as = 0
as1 = 0
asX = 0
asY = 0
scoutSector = 0

-- Starting Technology

-- repair stuff
scout1Rep = Group()
enemy2GuardRep = Group()

-- Events: Start
--[[event removeObj1;
event removeObj2;
event removeObj3;
event removeObj4;]]--

function startEvnt()
	centreViewPos(5 * 128, 5 * 128)
	-- make scavengers and New paradigm allies
	createAlliance(enemy1, enemy2)
	-- set scroll limits
	-- setScrollParams(0, 0, 64, 64);			//limit scroll
	-- set zoom Level 64x64
	setRadarZoom(1)
	-- set landing zone
	setLandingZone(4, 4, 6, 6)
	-- call in transport
	flyTransporterIn(player, entryX, entryY, false)
	setTransporterExit(player, exitX, exitY)
	-- make sure all buttons available/unavailable
	-- removeReticuleButton(DESIGN);
	-- removeReticuleButton(BUILD);
	addMessage(MissionBrief, MISS_MSG, 0, false)
	flashOff(INTELMAP)
	
	-- set up resource coords (since oil pools diappear when built on!!!)
	-- res1x=res1.x;
	-- res1y=res1.y;
	setPowerLevel(pow1, enemy1)
	setPowerLevel(pow2, enemy2)
	-- Blip Given at start
	addMessage(obj1, PROX_MSG, player, false)
	-- addMessage(obj2, PROX_MSG, player, false);
	-- addMessage(obj3, PROX_MSG, player, false);
	-- addMessage(obj4, PROX_MSG, player, false);
	deactivateEvent(startEvnt)
	-- allow to build stuff
	setStructureLimits(powerGen, numPow, 0)
	setStructureLimits(oilDerrick, numExt, 0)
	setStructureLimits(research, numRes, 0)
	setStructureLimits(factory, numFac, 0)
	setStructureLimits(command, 0, player)
	enableStructure(command, player)
	enableStructure(powerGen, 0)
	enableStructure(oilDerrick, 0)
	enableStructure(research, 0)
	enableStructure(factory, 0)
	-- enableStructure(powerModuleHack, 0);
	-- set transport time
	-- not available at start
	setReinforcementTime(-1/10.0)
	-- setReinforcementTime(ReinforceTime);
	-- delay before warning message
	pause(30/10.0)
	-- message from New Paradigm
	-- need Warning message here!!!!
	playSound(incomingSnd, player)
	pause(20/10.0)
	addMessage(NewParadigm_MSG1, MISS_MSG, 0, true)
end
callbackEvent(startEvnt, CALL_GAMEINIT)

-- Events:

-- Events: Artifacts
function art1TakeEvnt()
	numart = numart + 1
	-- playSound(art1Snd2, player);
	playSoundPos(art1Snd2, player, art1ID.x, art1ID.y, art1ID.z)
	destroyFeature(art1ID)
	-- removeMessage(art1Msg, PROX_MSG, player);
	enableResearch(art1Comp, player)
	deactivateEvent(art1TakeEvnt)
end

function art1PlaceEvnt()
	art1ID = addFeature(crate, art1X, art1Y)
	-- setEventTrigger(art1SeenEvnt, art1SeenTrig);
	conditionalEvent(art1TakeEvnt, "droidInRange(player, art1X, art1Y, 171)", 0.5)
	deactivateEvent(art1PlaceEvnt)
end
conditionalEvent(art1PlaceEvnt, "(destroyed(art1Get))", 0.5)

function art2TakeEvnt()
	numart = numart + 1
	-- playSound(art2Snd2, player);
	playSoundPos(art2Snd2, player, art2ID.x, art2ID.y, art2ID.z)
	destroyFeature(art2ID)
	-- removeMessage(art2Msg, PROX_MSG, player);
	enableResearch(art2Comp, player)
	deactivateEvent(art2TakeEvnt)
end

function art2PlaceEvnt()
	art2ID = addFeature(crate, art2X, art2Y)
	-- setEventTrigger(art2SeenEvnt, art2SeenTrig);
	conditionalEvent(art2TakeEvnt, "droidInRange(player, art2X, art2Y, 171)", 0.5)
	deactivateEvent(art2PlaceEvnt)
end
conditionalEvent(art2PlaceEvnt, "(destroyed(art2Get))", 0.5)

function art3TakeEvnt()
	numart = numart + 1
	-- playSound(art3Snd2, player);
	playSoundPos(art3Snd2, player, art3ID.x, art3ID.y, art3ID.z)
	destroyFeature(art3ID)
	-- removeMessage(art3Msg, PROX_MSG, player);
	enableResearch(art3Comp, player)
	deactivateEvent(art3TakeEvnt)
end

function art3PlaceEvnt()
	art3ID = addFeature(crate, art3X, art3Y)
	-- setEventTrigger(art3SeenEvnt, art3SeenTrig);
	conditionalEvent(art3TakeEvnt, "droidInRange(player, art3X, art3Y, 171)", 0.5)
	deactivateEvent(art3PlaceEvnt)
end
conditionalEvent(art3PlaceEvnt, "(destroyed(art3Get))", 0.5)

function art4TakeEvnt()
	numart = numart + 1
	-- playSound(art4Snd2, player);
	playSoundPos(art4Snd2, player, art4ID.x, art4ID.y, art4ID.z)
	destroyFeature(art4ID)
	-- removeMessage(art4Msg, PROX_MSG, player);
	enableResearch(art4Comp, player)
	deactivateEvent(art4TakeEvnt)
end

function art4PlaceEvnt()
	art4ID = addFeature(crate, art4X, art4Y)
	-- setEventTrigger(art4SeenEvnt, art4SeenTrig);
	conditionalEvent(art4TakeEvnt, "droidInRange(player, art4X, art4Y, 171)", 0.5)
	deactivateEvent(art4PlaceEvnt)
end
conditionalEvent(art4PlaceEvnt, "(destroyed(art4Get))", 0.5)

-- Events: Enemies
function enm1DeadEvnt()
	killStructsInArea(enemy1, REF_WALL, 4416, 4032, 6208, 5184, true, true)
	-- remove corner walls in base
	killStructsInArea(enemy1, REF_WALLCORNER, 4416, 4032, 6208, 5184, true, false)
	removeMessage(enm1Msg, PROX_MSG, player)
	-- playSound(enm1Snd2, player);
	playSoundPos(enm1Snd2, player, 5376, 4544, 0)
	deactivateEvent(enm1DeadEvnt)
end

function enm1SeenEvnt()
	addMessage(enm1Msg, PROX_MSG, player, false)
	-- playSound(enm1Snd1, player);
	playSoundPos(enm1Snd1, player, 5376, 4544, 0)
	-- allow reinforcements now base found
	setReinforcementTime(ReinforceTime/10.0)
	playSound(reinfSnd, player)
	-- setup checks for LZ
	conditionalEvent(LZNoGo, "(objectInArea(enemy1, 64, 64, 1344, 1344)) or (objectInArea(enemy2, 64, 64, 1344, 1344))", 3.5)
	-- setEventTrigger(LZ_OK,LZ_OKTrig);
	
	conditionalEvent(enm1DeadEvnt, "numStructsButNotWallsInArea(enemy1, 4416, 4032, 6208, 5184) == 0", 2.0)
	deactivateEvent(enm1SeenEvnt)
end
conditionalEvent(enm1SeenEvnt, "seenStructInArea(player, enemy1, false, 4416, 4032, 6208, 5184)", 1.0)

function enm2DeadEvnt()
	killStructsInArea(enemy2, REF_WALL, 5440, 64, 8000, 3136, true, true)
	-- remove corner walls in base
	killStructsInArea(enemy2, REF_WALLCORNER, 5440, 64, 8000, 3136, true, false)
	removeMessage(enm2Msg, PROX_MSG, player)
	-- playSound(enm2Snd2, player);
	playSoundPos(enm2Snd2, player, 6592, 1856, 0)
	deactivateEvent(enm2DeadEvnt)
end

-- base 2 seen
function enm2SeenEvnt()
	addMessage(enm2Msg, PROX_MSG, player, false)
	-- playSound(enm2Snd1, player);
	playSoundPos(enm2Snd1, player, 6592, 1856, 0)
	-- allow reinforcements now base found
	setReinforcementTime(ReinforceTime/10.0)
	-- setup checks for LZ
	conditionalEvent(LZNoGo, "(objectInArea(enemy1, 64, 64, 1344, 1344)) or (objectInArea(enemy2, 64, 64, 1344, 1344))", 3.5)
	-- setEventTrigger(LZ_OK,LZ_OKTrig);
	
	conditionalEvent(enm2DeadEvnt, "numStructsButNotWallsInArea(enemy2, 5440, 64, 8000, 3136) == 0", 2.0)
	deactivateEvent(enm2SeenEvnt)
end
conditionalEvent(enm2SeenEvnt, "seenStructInArea(player, enemy2, false, 5440, 64, 8000, 3136)", 1.0)

-- event wonYetLZEvnt;

-- Events: Win or Lose

-- assumes victory already checked
function nextLevEvnt()
	flushConsoleMessages()
	-- increased to allow all audio before won
	pause(20/10.0)
	-- give bonus research (if req'd)
	count = 0
	while count < numResP0 do
		enableResearch(resP0[count], 0)
		count = count + 1
	end
	
	-- flag next part of map
	C.gameLevel = C.gameLevel + 1
	-- setLandingZone(10, 51, 12, 53);
	-- enable research
	enableResearch(art1Comp, player)
	enableResearch(art2Comp, player)
	enableResearch(art3Comp, player)
	enableResearch(art4Comp, player)
	-- removeMessage(MissionBrief, MISS_MSG, player);
	startMission(CAMP_EXPAND, NextLev)
	-- End game here for now! (don't try next mission)
	-- gameOver(true);
	
	deactivateEvent(nextLevEvnt)
end

function gameLost()
	gameOverMessage(endMsg, MISS_MSG, 0, false)
	deactivateEvent(gameLost)
end

function lostYetEvnt()
	if not anyDroidsLeft(player) then
		if not anyStructButWallsLeft(player) then
			deactivateEvent(wonYetEvnt)
			-- setEventTrigger(wonYetLZEvnt, inactive);
			deactivateEvent(timeUp)
			-- waits 2 seconds before ending
			repeatingEvent(gameLost, 2.0)
			deactivateEvent(lostYetEvnt)
		end
	end
end
repeatingEvent(lostYetEvnt, 0.5)


-- out of time?
function timeUp()
	deactivateEvent(wonYetEvnt)
	-- setEventTrigger(wonYetLZEvnt, inactive);
	deactivateEvent(lostYetEvnt)
	-- waits 2 seconds before ending
	repeatingEvent(gameLost, 2.0)
	deactivateEvent(timeUp)
end
callbackEvent(timeUp, CALL_MISSION_TIME)

-- have all enemies lost yet?
function wonYetEvnt()
	if not anyDroidsLeft(enemy2) then
		if not anyStructButWallsLeft(enemy2) then
			if numart == 4 then
				deactivateEvent(lostYetEvnt)
				deactivateEvent(timeUp)
				repeatingEvent(nextLevEvnt, 0.5)
				deactivateEvent(wonYetEvnt)
			end
		end
	end
end
repeatingEvent(wonYetEvnt, 0.5)


-- cheat button ctrl M
function cheatEvnt()
	repeatingEvent(nextLevEvnt, 0.5)
	deactivateEvent(cheatEvnt)
end
callbackEvent(cheatEvnt, CALL_MISSION_START)

-- Base Under Attack
function baseHit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= C.selectedPlayer then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if t >= 20 then
		t = 0
		if hitStruc ~= nil then
			playSoundPos(attackSnd1, C.selectedPlayer, hitStruc.x, hitStruc.y, hitStruc.z)
		else
			playSound(attackSnd1, C.selectedPlayer)
		end
	end
end
callbackEvent(baseHit, CALL_STRUCT_ATTACKED)

function everySec()
	t = t + 1
end
repeatingEvent(everySec, 1.0)

function seeBaseHit()
	if hitStruc ~= nil then
		centreView(hitStruc)
		-- flag known about!
		t = 0
	end
end
callbackEvent(seeBaseHit, CALL_MISSION_END)


function removeObj1()
	removeMessage(obj1, PROX_MSG, player)
	-- addMessage(obj2, PROX_MSG, player, false);
	-- playSound(enm1Snd1, player);
	-- setEventTrigger(removeObj2, obj2Trig);
	deactivateEvent(removeObj1)
end
conditionalEvent(removeObj1, "droidInRange(player, 448, 6592, 5 * 128)", 2.0)


-- event prototypes
-- event enemy1AttackBase;

function startup()
	setAssemblyPoint(enm1, enm1Ass1X, enm1Ass1Y)
	setAssemblyPoint(enm2, enm2Ass1X, enm2Ass1Y)
	-- setAssemblyPoint (enm22, enm2Ass2X, enm2Ass2Y);
	-- set up of positions now done in VLO
	
	-- make scavengers allies
	createAlliance(enemy1, enemy2)
	
	-- whether the oil well has been cleared
	-- oilWellClear = FALSE;
	-- set starting power
	setPowerLevel(200, enemy1)
	setPowerLevel(200, enemy2)
	-- enemy2 leadership (change to higher when fixed!)
	ld = 75
	-- make up starting forces
	-- 128, 6144, 2048, 7040);
	groupAddArea(enemy1West, enemy1, 704, 6336, 1344, 6848)
	groupAddArea(enemy1Scout, enemy1, 576, 6336, 832, 6848)
	-- 4800, 192, 5824, 3008);
	groupAddArea(enemy1North, enemy1, 4928, 448, 5824, 1728)
	-- 6400, 6784, 7680, 7808);
	groupAddArea(enemy1South, enemy1, 6464, 6976, 7616, 7872)
	groupAddArea(enemy1Hill, enemy1, 4096, 4224, 4480, 4480)
	-- hold position
	setGroupSecondary(enemy1Hill, DSO_HALTTYPE, DSS_HALT_HOLD)
	-- groupAddArea(enemy1Force1, enemy1, 4288, 9024, 5568, 9920);
	-- groupAddArea(enemy1Force2, enemy1, 1600, 10048, 2624, 10816);
	groupAddArea(scout1, enemy2, 6336, 1984, 6848, 2240)
	groupAddArea(enemy2Guard, enemy2, 6720, 1600, 7232, 1984)
	-- set retreat point
	-- retreat to road block
	setRetreatPoint(enemy1, enm1Ret1X, enm1Ret1Y)
	-- set morale to 10%
	setRetreatForce(enemy1, 90)
	-- set leadership chance (small=more likely?)
	setRetreatLeadership(enemy1, 50)
	-- set retreat point enemy2
	-- retreat to base2
	setRetreatPoint(enemy2, enm2Ret1X, enm2Ret1Y)
	-- set morale to 25%
	setRetreatForce(enemy2, 75)
	-- set leadership chance (small=more likely?)
	setRetreatLeadership(enemy2, ld)
	
	-- player specific technology startups
	count = 0
	while count < numtecE1 do
		completeResearch(tecE1[count], enemy1)
		count = count + 1
	end
	count = 0
	while count < numtecE2 do
		completeResearch(tecE2[count], enemy2)
		count = count + 1
	end
end
callbackEvent(startup, CALL_GAMEINIT)


-- deal with a droid being built by enemy1
function enemy1build(_newDroid, _newDroidFactory)
	if _newDroid.player ~= enemy1 then return end
	newDroid, newDroidFactory = _newDroid, _newDroidFactory -- wz2lua: probably these can be used as function arguments directly
	groupAddDroid(enemy1Build, newDroid)
	if groupCountMembers(enemy1Build) >= 4 then
		groupAddGroup(enemy1Attack, enemy1Build)
	end
end
callbackEvent(enemy1build, CALL_NEWDROID)
-- do attack force decision here

-- deal with a droid being built by enemy2
function enemy2build(_newDroid, _newDroidFactory)
	if _newDroid.player ~= enemy2 then return end
	newDroid, newDroidFactory = _newDroid, _newDroidFactory -- wz2lua: probably these can be used as function arguments directly
	if groupCountMembers(enemy2Guard) < 6 then
		groupAddDroid(enemy2Guard, newDroid)
	end
	-- RktP or HMG
	if (groupCountMembers(scout1) < 4) and (enm2Fact1State > 0) then
		groupAddDroid(scout1, newDroid)
		-- set morale to 10%
		setGroupRetreatForce(scout1, 80)
		-- set leadership chance (small=more likely?)
		setGroupRetreatLeadership(scout1, 0)
		-- retreat to base2
		setGroupRetreatPoint(scout1, enm2Ret1X, enm2Ret1Y)
	else
		-- MCan
		if (groupCountMembers(strike1) < 6) and (enm2Fact1State == 0) then
			groupAddDroid(strike1, newDroid)
		else
			if groupCountMembers(strike2) < 6 then
				groupAddDroid(strike2, newDroid)
			else
				groupAddDroid(enemy2Build, newDroid)
				randNum = random(10)
				if (groupCountMembers(enemy2Build) >= 4) and (randNum < 5) then
					groupAddGroup(strike1, enemy2Build)
				else
					if (groupCountMembers(enemy2Build) >= 4) and (randNum >= 5) then
						groupAddGroup(strike2, enemy2Build)
					end
				end
			end
		end
	end
end
callbackEvent(enemy2build, CALL_NEWDROID)


-- events for build lists start here
-- Enemy 1
-- build list
function enm1Fact1Evnt()
	enm1Fact1Destroyed = destroyed(enm1ID)
	if enm1Fact1Destroyed then
		deactivateEvent(enm1Fact1Evnt)
	else
		if structureIdle(enm1) and (groupCountMembers(enemy1Build) + groupCountMembers(enemy1Attack)) < enemy1Tot then
			if enm1Fact1State == 0 then
				buildDroid(rktBuggy, enm1, enemy1, 1)
				enm1Fact1State = 1
			else
				if enm1Fact1State == 1 then
					buildDroid(bloke, enm1, enemy1, 3)
					enm1Fact1State = 2
				else
					if enm1Fact1State == 2 then
						buildDroid(rktJeep, enm1, enemy1, 1)
						enm1Fact1State = 3
					else
						buildDroid(buggy, enm1, enemy1, 1)
						enm1Fact1State = 0
					end
				end
			end
		end
	end
end

function enm1Start1Evnt()
	enm1Fact1Destroyed = destroyed(enm1ID)
	if not enm1Fact1Destroyed then
		buildDroid(rktJeep, enm1, enemy1, 1)
		repeatingEvent(enm1Fact1Evnt, 40.0)
	end
	deactivateEvent(enm1Start1Evnt)
end
conditionalEvent(enm1Start1Evnt, "droidInRange(player, 4544, 4288, 15 * 128)", 2.0)

-- Enemy 2
-- build list
function enm2Fact1Evnt()
	enm2Fact1Destroyed = destroyed(enm2ID)
	if enm2Fact1Destroyed then
		deactivateEvent(enm2Fact1Evnt)
	else
		if structureIdle(enm2) and (numDroidsInArea(enemy2, 0, 0, 64 * 128, 64 * 128)) < enemy2Tot then
			if enm2Fact1State == 0 then
				buildDroid(BugRktP, enm2, enemy2, 2)
				enm2Fact1State = 1
			else
				if enm2Fact1State == 1 then
					buildDroid(BugHMG, enm2, enemy2, 2)
					enm2Fact1State = 2
				else
					if enm2Fact1State == 2 then
						buildDroid(ScorpMCan, enm2, enemy2, 1)
						enm2Fact1State = 0
					else
						buildDroid(ScorpMCan, enm2, enemy2, 2)
						enm2Fact1State = 0
					end
				end
			end
		end
	end
end


-- New Paradigm Base or droids attacked: Give warning and start production
-- event enm2Start1Evnt(enm2Start1Trig)
function enm2Start1Evnt(_attackedObj, _attackerObj)
	if _attackedObj.player ~= enemy2 then return end
	attackedObj, attackerObj = _attackedObj, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	enm2Fact1Destroyed = destroyed(enm2ID)
	if not enm2Fact1Destroyed then
		buildDroid(BugRktP, enm2, enemy2, 1)
	end
	
	-- get defence force to block gate
	-- orderGroupLoc(enemy2Guard, DORDER_SCOUT, enm2Ass1X, enm2Ass1Y);
	-- warning of incoming message
	playSound(incomingSnd, player)
	pause(20/10.0)
	-- message from New Paradigm
	addMessage(NewParadigm_MSG2, MISS_MSG, 0, true)
	-- allow reinforcements (unneccessary?)
	-- setReinforcementTime(ReinforceTime);
	
	repeatingEvent(enm2Fact1Evnt, 60.0)
	-- setEventTrigger(enm2Fact2Evnt, enm2Fact2Trig);
	repeatingEvent(scoutAtkSector, 5.0)
	repeatingEvent(heavySector, 7.0)
	deactivateEvent(enm2Start1Evnt)
end
callbackEvent(enm2Start1Evnt, CALL_ATTACKED)

function enemy1NConvoy()
	orderGroupLoc(enemy1North, DORDER_MOVE, 5184, 5440)
	deactivateEvent(enemy1NConvoy)
end
conditionalEvent(enemy1NConvoy, "droidInArea(player, 4416, 64, 5952, 1728)", 1.0)

function enemy1WConvoy()
	orderGroupLoc(enemy1West, DORDER_MOVE, 6080, 5312)
	deactivateEvent(enemy1WConvoy)
end
conditionalEvent(enemy1WConvoy, "droidInArea(player, 192, 5568, 2368, 7488)", 1.0)

function enemy1SConvoy()
	orderGroupLoc(enemy1South, DORDER_MOVE, 5952, 4288)
	deactivateEvent(enemy1SConvoy)
end
conditionalEvent(enemy1SConvoy, "droidInArea(player, 5824, 6080, 8000, 8000)", 1.0)

function lastAttack1()
	if not anyStructButWallsLeft(enemy1) then
		groupAddArea(enemy1Fin, enemy1, 0, 0, 64 * 128, 64 * 128)
		orderGroupLoc(enemy1Fin, DORDER_SCOUT, enm1Ass1X, enm1Ass1Y)
	end
end
repeatingEvent(lastAttack1, 5.0)
-- setEventTrigger(lastAttack1, inactive);

function lastAttack2()
	if not anyStructButWallsLeft(enemy2) then
		groupAddArea(enemy2Fin, enemy1, 0, 0, 64 * 128, 64 * 128)
		orderGroupLoc(enemy2Fin, DORDER_SCOUT, enm2Ass1X, enm2Ass1Y)
	end
end
repeatingEvent(lastAttack2, 5.0)
-- setEventTrigger(lastAttack2, inactive);

-- Scavenger base hit!!! mobilise NP
function scavHit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= enemy1 then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if hitStruc == enm1 then
		repeatingEvent(enm2Fact1Evnt, 60.0)
		-- send New paradigm attack force
		orderGroupLoc(scout1, DORDER_SCOUT, enm2Ret2X, enm2Ret2Y)
		--[[Don't bother reinforcing Scav base with factory production
			//set assembly at Scav Base
				enm2Fact1Destroyed = buildingDestroyed (enm2ID, enemy2);
				if 	(not enm2Fact1Destroyed)
				{
					setAssemblyPoint (enm2, enm2Ret2X, enm2Ret2Y);
				}
				//build first ones to Trigger AI
				buildDroid (BugRktP, enm2, enemy2, 1);]]--
		deactivateEvent(scavHit)
	end
end
callbackEvent(scavHit, CALL_STRUCT_ATTACKED)

-- Generic go investigate nearby structures if under attack!

function enm1Hit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= enemy1 then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if (hitStruc ~= nil) and (attackerObj ~= nil) then
		tempx1 = (hitStruc.x) - 1280
		tempy1 = (hitStruc.y) - 1280
		tempx2 = (hitStruc.x) + 1280
		tempy2 = (hitStruc.y) + 1280
		groupAddArea(enemy1Guard, enemy1, tempx1, tempy1, tempx2, tempy2)
		-- hitStruc.x, hitStruc.y);
		orderGroupLoc(enemy1Guard, DORDER_SCOUT, attackerObj.x, attackerObj.y)
	end
end
callbackEvent(enm1Hit, CALL_STRUCT_ATTACKED)


function enm2Hit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= enemy2 then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if (attackerObj ~= nil) and (groupCountMembers(enemy2Guard) >= 4) then
		orderGroupLoc(enemy2Guard, DORDER_SCOUT, attackerObj.x, attackerObj.y)
	end
	if attackerObj ~= nil then
		tempx1 = attackerObj.x - 1280
		tempy1 = attackerObj.y - 1280
		tempx2 = attackerObj.x + 1280
		tempy2 = attackerObj.y + 1280
		groupAddArea(enemy1Guard, enemy1, tempx1, tempy1, tempx2, tempy2)
		orderGroupLoc(enemy1Guard, DORDER_SCOUT, attackerObj.x, attackerObj.y)
	end
end
callbackEvent(enm2Hit, CALL_STRUCT_ATTACKED)



-- Sector seek and destroy stuff
function scoutAtkSector()
	as1 = scoutSector
	if not (objectInArea(player, atk1SectX1[as1], atk1SectY1[as1], atk1SectX2[as1], atk1SectY2[as1])) then
		setGroupRetreatPoint(scout1, scout1.x, scout1.y)
		-- setGroupRetreatPoint(scout2, scout2.x, scout2.y);
		-- sector clear so choose another
		-- keep track of frontline
		scoutSector = scoutSector + 1
		if scoutSector >= numAtk1Sects then
			scoutSector = scoutSector - 1
		end
	end
	
	-- put repaired scout1 droids back in group!
	initIterateGroup(scout1Rep)
	count = 0
	while count < groupCountMembers(scout1Rep) do
		hitDroid = iterateGroup(scout1Rep)
		if hitDroid.health >= 99 then
			orderDroidLoc(hitDroid, DORDER_SCOUT, scout1.x, scout1.y)
			groupAddDroid(scout1, hitDroid)
		end
		count = count + 1
	end
	-- set repair level
	setGroupSecondary(scout1, DSO_REPAIR_LEVEL, DSS_REPLEV_LOW)
	as1 = scoutSector
	if idleGroup(scout1) > groupCountMembers(scout1) / 2 then
		asX = atk1SectX1[as1] + random(atk1SectX2[as1] - atk1SectX1[as1])
		asY = atk1SectY1[as1] + random(atk1SectY2[as1] - atk1SectY1[as1])
		orderGroupLoc(scout1, DORDER_SCOUT, asX, asY)
	end
end
--[[asX = atk1SectX1[as1] + random(atk1SectX2[as1] - atk1SectX1[as1]);
	asY = atk1SectY1[as1] + random(atk1SectY2[as1] - atk1SectY1[as1]);
	orderGroupLoc(scout2, DORDER_SCOUT, asX, asY);]]--
-- also want to set previous sector as retreat point!

function heavySector()
	if idleGroup(strike1) > groupCountMembers(strike1) / 2 then
		as1 = scoutSector
		asX = atk1SectX1[as1] + random(atk1SectX2[as1] - atk1SectX1[as1])
		asY = atk1SectY1[as1] + random(atk1SectY2[as1] - atk1SectY1[as1])
		orderGroupLoc(strike1, DORDER_SCOUT, asX, asY)
	end
	
	-- send random attack force
	if idleGroup(strike2) > groupCountMembers(strike2) / 2 then
		as1 = random(numAtk1Sects)
		asX = atk1SectX1[as1] + random(atk1SectX2[as1] - atk1SectX1[as1])
		asY = atk1SectY1[as1] + random(atk1SectY2[as1] - atk1SectY1[as1])
		orderGroupLoc(strike2, DORDER_SCOUT, asX, asY)
	end
	-- put repaired droids back in group!
	initIterateGroup(enemy2GuardRep)
	count = 0
	while count < groupCountMembers(enemy2GuardRep) do
		hitDroid = iterateGroup(enemy2GuardRep)
		if hitDroid.health >= 99 then
			orderDroidLoc(hitDroid, DORDER_SCOUT, enemy2Guard.x, enemy2Guard.y)
			groupAddDroid(enemy2Guard, hitDroid)
		end
		count = count + 1
	end
	-- set repair level (medium damage)
	setGroupSecondary(enemy2Guard, DSO_REPAIR_LEVEL, DSS_REPLEV_LOW)
	-- if guard force not busy, go home
	if (idleGroup(enemy2Guard) > groupCountMembers(enemy2Guard) / 2) or (groupCountMembers(enemy2Guard) < 3) then
		orderGroupLoc(enemy2Guard, DORDER_SCOUT, 6208, 1984)
	end
end

function checkRepair()
	if (groupCountMembers(enemy2GuardRep) + groupCountMembers(scout1Rep)) <= 4 then
		initIterateGroup(enemy2Guard)
		count = 0
		while count < groupCountMembers(enemy2Guard) do
			hitDroid = iterateGroup(enemy2Guard)
			-- if (hitDroid.health <= repLev)
			if hitDroid.order == DORDER_RTR then
				orderDroid(hitDroid, DORDER_RTR)
				groupAddDroid(enemy2GuardRep, hitDroid)
			end
			count = count + 1
		end
		-- scout1 repair
		initIterateGroup(scout1)
		count = 0
		while count < groupCountMembers(scout1) do
			hitDroid = iterateGroup(scout1)
			-- if (hitDroid.health <= repLev)
			if hitDroid.order == DORDER_RTR then
				orderDroid(hitDroid, DORDER_RTR)
				groupAddDroid(scout1Rep, hitDroid)
			end
			count = count + 1
		end
	end
end
repeatingEvent(checkRepair, 2.0)

function goGet()
	orderGroupLoc(enemy1Scout, DORDER_SCOUT, 6 * 128, 6 * 128)
	--[[setEventTrigger(enm2Fact1Evnt, enm2Fact1Trig);
		//setEventTrigger(enm2Fact2Evnt, enm2Fact2Trig);
		setEventTrigger(scoutAtkSector, scoutTrig);
		setEventTrigger(heavySector, heavyTrig);]]--
	deactivateEvent(goGet)
end
delayedEvent(goGet, 60.0)

function LZNoGo()
	if not transOnMap then
		playSoundPos(LZComp, player, 704, 704, 0)
		-- disable transport landing
		-- (set to 1 hour)
		setReinforcementTime(LZ_COMPROMISED_TIME/10.0)
		-- allow check for clear!
		conditionalEvent(LZ_OK, "(not objectInArea(enemy1, 64, 64, 1344, 1344)) and (not objectInArea(enemy2, 64, 64, 1344, 1344))", 3.5)
		deactivateEvent(LZNoGo)
	end
end

function LZ_OK()
	playSoundPos(LZClear, player, 704, 704, 0)
	-- allow reinforcements now LZ clear
	-- (set back to normal)
	setReinforcementTime(ReinforceTime/10.0)
	conditionalEvent(LZNoGo, "(objectInArea(enemy1, 64, 64, 1344, 1344)) or (objectInArea(enemy2, 64, 64, 1344, 1344))", 3.5)
	deactivateEvent(LZ_OK)
end

function scoutSeenEvnt()
	if scoutDroid ~= nil then
		if droidHasSeen(scoutDroid, player) then
			orderDroidLoc(scoutDroid, DORDER_MOVE, enm2Ret1X, enm2Ret1Y)
			deactivateEvent(scoutSeenEvnt)
		end
	else
		deactivateEvent(scoutSeenEvnt)
	end
end
repeatingEvent(scoutSeenEvnt, 0.7)

function transOn()
	transOnMap = true
end
callbackEvent(transOn, CALL_TRANSPORTER_REINFORCE)

function transOff(_player)
	if _player ~= player then return end
	transOnMap = false
end
callbackEvent(transOff, CALL_TRANSPORTER_OFFMAP)


---------- stubs ----------

if gameOverMessage == nil then gameOverMessage = function() print("stub: gameOverMessage"); return 0 end end
if setGroupRetreatPoint == nil then setGroupRetreatPoint = function() print("stub: setGroupRetreatPoint"); return 0 end end
if centreView == nil then centreView = function() print("stub: centreView"); return 0 end end
if anyStructButWallsLeft == nil then anyStructButWallsLeft = function() print("stub: anyStructButWallsLeft"); return 0 end end
if enableResearch == nil then enableResearch = function() print("stub: enableResearch"); return 0 end end
if iterateGroup == nil then iterateGroup = function() print("stub: iterateGroup"); return 0 end end
if droidInArea == nil then droidInArea = function() print("stub: droidInArea"); return 0 end end
if numStructsButNotWallsInArea == nil then numStructsButNotWallsInArea = function() print("stub: numStructsButNotWallsInArea"); return 0 end end
if playSoundPos == nil then playSoundPos = function() print("stub: playSoundPos"); return 0 end end
if flashOff == nil then flashOff = function() print("stub: flashOff"); return 0 end end
if addFeature == nil then addFeature = function() print("stub: addFeature"); return 0 end end
if groupAddDroid == nil then groupAddDroid = function() print("stub: groupAddDroid"); return 0 end end
if setRetreatPoint == nil then setRetreatPoint = function() print("stub: setRetreatPoint"); return 0 end end
if orderGroupLoc == nil then orderGroupLoc = function() print("stub: orderGroupLoc"); return 0 end end
if anyDroidsLeft == nil then anyDroidsLeft = function() print("stub: anyDroidsLeft"); return 0 end end
if droidInRange == nil then droidInRange = function() print("stub: droidInRange"); return 0 end end
if pause == nil then pause = function() print("stub: pause"); return 0 end end
if initIterateGroup == nil then initIterateGroup = function() print("stub: initIterateGroup"); return 0 end end
if removeMessage == nil then removeMessage = function() print("stub: removeMessage"); return 0 end end
if destroyFeature == nil then destroyFeature = function() print("stub: destroyFeature"); return 0 end end
if setGroupSecondary == nil then setGroupSecondary = function() print("stub: setGroupSecondary"); return 0 end end
if idleGroup == nil then idleGroup = function() print("stub: idleGroup"); return 0 end end
if destroyed == nil then destroyed = function() print("stub: destroyed"); return 0 end end
if setReinforcementTime == nil then setReinforcementTime = function() print("stub: setReinforcementTime"); return 0 end end
if setStructureLimits == nil then setStructureLimits = function() print("stub: setStructureLimits"); return 0 end end
if setPowerLevel == nil then setPowerLevel = function() print("stub: setPowerLevel"); return 0 end end
if groupAddArea == nil then groupAddArea = function() print("stub: groupAddArea"); return 0 end end
if setLandingZone == nil then setLandingZone = function() print("stub: setLandingZone"); return 0 end end
if buildingDestroyed == nil then buildingDestroyed = function() print("stub: buildingDestroyed"); return 0 end end
if objectInArea == nil then objectInArea = function() print("stub: objectInArea"); return 0 end end
if orderDroid == nil then orderDroid = function() print("stub: orderDroid"); return 0 end end
if killStructsInArea == nil then killStructsInArea = function() print("stub: killStructsInArea"); return 0 end end
if completeResearch == nil then completeResearch = function() print("stub: completeResearch"); return 0 end end
if numDroidsInArea == nil then numDroidsInArea = function() print("stub: numDroidsInArea"); return 0 end end
if startMission == nil then startMission = function() print("stub: startMission"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if orderDroidLoc == nil then orderDroidLoc = function() print("stub: orderDroidLoc"); return 0 end end
if setTransporterExit == nil then setTransporterExit = function() print("stub: setTransporterExit"); return 0 end end
if createAlliance == nil then createAlliance = function() print("stub: createAlliance"); return 0 end end
if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if buildDroid == nil then buildDroid = function() print("stub: buildDroid"); return 0 end end
if setRetreatForce == nil then setRetreatForce = function() print("stub: setRetreatForce"); return 0 end end
if flyTransporterIn == nil then flyTransporterIn = function() print("stub: flyTransporterIn"); return 0 end end
if droidHasSeen == nil then droidHasSeen = function() print("stub: droidHasSeen"); return 0 end end
if seenStructInArea == nil then seenStructInArea = function() print("stub: seenStructInArea"); return 0 end end
if groupAddGroup == nil then groupAddGroup = function() print("stub: groupAddGroup"); return 0 end end
if addMessage == nil then addMessage = function() print("stub: addMessage"); return 0 end end
if setRadarZoom == nil then setRadarZoom = function() print("stub: setRadarZoom"); return 0 end end
if random == nil then random = function() print("stub: random"); return 0 end end
if structureIdle == nil then structureIdle = function() print("stub: structureIdle"); return 0 end end
if setRetreatLeadership == nil then setRetreatLeadership = function() print("stub: setRetreatLeadership"); return 0 end end
if enableStructure == nil then enableStructure = function() print("stub: enableStructure"); return 0 end end
if setGroupRetreatLeadership == nil then setGroupRetreatLeadership = function() print("stub: setGroupRetreatLeadership"); return 0 end end
if flushConsoleMessages == nil then flushConsoleMessages = function() print("stub: flushConsoleMessages"); return 0 end end
if centreViewPos == nil then centreViewPos = function() print("stub: centreViewPos"); return 0 end end
if setGroupRetreatForce == nil then setGroupRetreatForce = function() print("stub: setGroupRetreatForce"); return 0 end end
if setAssemblyPoint == nil then setAssemblyPoint = function() print("stub: setAssemblyPoint"); return 0 end end
