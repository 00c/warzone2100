-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
enemy1Build = Group()
enemy1Attack = Group()
enemy1Start = Group()
enemy1Fin = Group()
enemy1Force1 = Group()
enemy1Force2 = Group()
enemy2Build = Group()
enemy2Attack = Group()
enemy2Start = Group()
enemy2Fin = Group()
hillGroup = Group()
oilWellClear = false

attackedStruct = nil
attacker = nil

newDroidFactory = nil

-- temporary variables
newDroid = nil
moveX = 0
moveY = 0
xdiff = 0
ydiff = 0
-- default leadership for enemy2
ld = 0

-- values for build lists start here
-- General Values
-- limit build to this number
-- limit build to this number
-- starting power

-- Enemy Tactics

-- enemy1
enm0Fact1State = 0
enm0Fact1Destroyed = false

enm1Fact1State = 0
enm1Fact1Destroyed = false

-- enemy2
enm2Fact1State = 0
atkTot = 0
enm2Fact1Destroyed = false

-- hill attack
temp = 0

-- trigger enm2Start1Trig(droidInArea(player, 320, 11712, 6720, 13120),10); //cross south of radar hill
-- at 1st base?
-- 40 second build rate
-- wait 6 mins before building for attack

-- 20 second delay between hill attacks, keep moving
-- event prototypes

function startup()
	atkTot = 4
	-- setassembly points here, since can't do later in case factory destroyed!!
	setAssemblyPoint(enm0, enm0Ass1X, enm0Ass1Y)
	setAssemblyPoint(enm1, enm1Ass1X, enm1Ass1Y)
	setAssemblyPoint(enm2, enm2Ass1X, enm2Ass1Y)
	
	-- set up of positions now done in VLO
	
	-- make scavengers allies
	createAlliance(enemy1, enemy2)
	
	-- whether the oil well has been cleared
	oilWellClear = false
	-- set starting power
	setPowerLevel(pow1, enemy1)
	setPowerLevel(pow2, enemy2)
	-- enemy2 leadership (change to higher when fixed!)
	ld = 75
	-- make all droids left part of build group
	-- groupAddArea(enemy1Start, enemy1, 128, 7744, 7744, 16000);
	-- groupAddGroup(enemy1Build, enemy1Start);
	-- groupAddArea(enemy2Start, enemy2, 128, 7744, 7744, 16000);
	-- groupAddGroup(enemy2Build, enemy2Start);
	-- make up starting forces
	groupAddArea(enemy1Force1, enemy1, 4288, 9024, 5568, 9920)
	groupAddArea(enemy1Force2, enemy1, 1600, 10048, 2624, 10816)
	-- set retreat point
	-- retreat to road block
	setGroupRetreatPoint(enemy1Force1, enm1Ret1X, enm1Ret1Y)
	-- set morale to 10%
	setGroupRetreatForce(enemy1Force1, 90)
	-- set leadership chance (small=more likely?)
	setGroupRetreatLeadership(enemy1Force1, 50)
	-- retreat to road block
	setGroupRetreatPoint(enemy1Force2, enm1Ret1X, enm1Ret1Y)
	-- set morale to 10%
	setGroupRetreatForce(enemy1Force2, 90)
	-- set leadership chance (small=more likely?)
	setGroupRetreatLeadership(enemy1Force2, 50)
	-- set retreat point enemy2
	-- retreat to base2
	setRetreatPoint(enemy2, enm2Ret1X, enm2Ret1Y)
	-- set morale to 25%
	setRetreatForce(enemy2, 75)
	-- set leadership chance (small=more likely?)
	setRetreatLeadership(enemy2, ld)
	-- start hill attack
	groupAddArea(hillGroup, enemy2, 1088, 8891, 1600, 9536)
	temp = random(hillNum)
	orderGroupLoc(hillGroup, DORDER_MOVE, hillX[temp], hillY[temp])
end
callbackEvent(startup, CALL_GAMEINIT)

-- deal with a droid being built by enemy1
function enemy1build(_newDroid, _newDroidFactory)
	if _newDroid.player ~= enemy1 then return end
	newDroid, newDroidFactory = _newDroid, _newDroidFactory -- wz2lua: probably these can be used as function arguments directly
	if droidInRange(player, enm1Ass1X, enm1Ass1Y, 9 * 128) then
		setRetreatPoint(enemy1, enm1Ret2X, enm1Ret2Y)
		-- set morale to 75%
		setRetreatForce(enemy1, 75)
		-- set leadership chance (small=more likely?)
		setRetreatLeadership(enemy1, 50)
		
		groupAddDroid(enemy1Attack, newDroid)
		
		-- get all the droids back to base
		orderGroupLoc(enemy1Attack, DORDER_SCOUT, enm1Ass1X, enm1Ass1Y)
	else
		groupAddDroid(enemy1Build, newDroid)
		
		if groupCountMembers(enemy1Build) >= 4 then
			groupAddGroup(enemy1Attack, enemy1Build)
			
			if droidInRange(player, rBlkX, rBlkY, 8 * 128) then
				moveX = rBlkX
				moveY = rBlkY
			else
				moveX = playerX
				moveY = playerY
			end
			
			orderGroupLoc(enemy1Attack, DORDER_SCOUT, moveX, moveY)
		end
	end
end
callbackEvent(enemy1build, CALL_NEWDROID)

-- send the droids to the player base if there is nothing at
-- the oil derek
function enemy1AttackBase()
	if not objectInRange(player, oilPatchX, oilPatchY, 8 * 128) then
		orderGroupLoc(enemy1Attack, DORDER_SCOUT, playerX, playerY)
		orderGroupLoc(enemy2Attack, DORDER_SCOUT, playerX, playerY)
		oilWellClear = true
	else
		oilWellClear = false
	end
end

-- deal with a droid being built by enemy2
function enemy2build(_newDroid, _newDroidFactory)
	if _newDroid.player ~= enemy2 then return end
	newDroid, newDroidFactory = _newDroid, _newDroidFactory -- wz2lua: probably these can be used as function arguments directly
	if newDroidFactory == enm2 then
		if droidInRange(player, enm2Ass1X, enm2Ass1Y, 9 * 128) then
			groupAddDroid(enemy2Attack, newDroid)
			-- Set Morale to stubborn
			-- retreat to base2
			setRetreatPoint(enemy2, enm2Ret2X, enm2Ret2Y)
			-- set morale to 75%
			setRetreatForce(enemy2, 75)
			-- set leadership chance (small=more likely?)
			setRetreatLeadership(enemy2, ld)
			
			-- get all the droids back to base
			orderGroupLoc(enemy2Attack, DORDER_SCOUT, enm2Ass1X, enm2Ass1Y)
		else
			groupAddDroid(enemy2Build, newDroid)
			
			if groupCountMembers(enemy2Build) >= atkTot then
				atkTot = atkTot + 1
				groupAddGroup(enemy2Attack, enemy2Build)
				-- set Morale low
				-- retreat to base2
				setRetreatPoint(enemy2, enm2Ret2X, enm2Ret2Y)
				-- set morale to 25%
				setRetreatForce(enemy2, 75)
				-- set leadership chance (small=more likely?)
				setRetreatLeadership(enemy2, ld)
				
				-- go attack the base
				moveX = playerX
				moveY = playerY
				orderGroupLoc(enemy2Attack, DORDER_SCOUT, moveX, moveY)
			end
		end
	end
end
callbackEvent(enemy2build, CALL_NEWDROID)
function hillGroupEvnt()
	groupAddArea(hillGroup, enemy2, 960, 8640, 1984, 9664)
end
repeatingEvent(hillGroupEvnt, 20.0)

function hillAttackEvnt()
	temp = random(4)
	orderGroupLoc(hillGroup, DORDER_MOVE, hillX[temp], hillY[temp])
end
repeatingEvent(hillAttackEvnt, 20.0)

-- events for build lists start here
-- Enemy 1
-- build list
function enm0Fact1Evnt()
	enm0Fact1Destroyed = destroyed(enm0ID)
	if enm0Fact1Destroyed then
		deactivateEvent(enm0Fact1Evnt)
	else
		-- limit total to 10?
		if structureIdle(enm0) and (groupCountMembers(hillGroup) <= 10) then
			if enm0Fact1State == 0 then
				buildDroid(bloke, enm0, enemy2, 2)
			else
				-- enm0Fact1State = 1;
				if enm0Fact1State == 1 then
					buildDroid(trike, enm0, enemy2, 1)
					enm0Fact1State = 2
				else
					if enm0Fact1State == 2 then
						buildDroid(buggy, enm0, enemy2, 1)
						enm0Fact1State = 3
					else
						buildDroid(bloke, enm0, enemy2, 2)
						enm0Fact1State = 1
					end
				end
			end
		end
	end
end
repeatingEvent(enm0Fact1Evnt, 40.0)

function enm1Fact1Evnt()
	enm1Fact1Destroyed = destroyed(enm1ID)
	if enm1Fact1Destroyed then
		enm0Fact1State = 1
		-- protect base
		orderGroupLoc(hillGroup, DORDER_MOVE, enm0Ass1X, enm0Ass1Y)
		deactivateEvent(hillAttackEvnt)
		deactivateEvent(enm1Fact1Evnt)
	else
		if structureIdle(enm1) and (groupCountMembers(enemy1Build) + groupCountMembers(enemy1Attack)) < enemy1Tot then
			if enm1Fact1State == 0 then
				buildDroid(trike, enm1, enemy1, 1)
				enm1Fact1State = 1
			else
				if enm1Fact1State == 1 then
					buildDroid(bloke, enm1, enemy1, 2)
					enm1Fact1State = 2
				else
					if enm1Fact1State == 2 then
						buildDroid(buggy, enm1, enemy1, 1)
						enm1Fact1State = 3
					else
						buildDroid(bloke, enm1, enemy1, 2)
						enm1Fact1State = 0
					end
				end
			end
		end
	end
end

function enm1Start1Evnt()
	setRetreatPoint(enemy1, enm1Ret2X, enm1Ret2Y)
	-- set morale to 75%
	setRetreatForce(enemy1, 75)
	-- set leadership chance (small=more likely?)
	setRetreatLeadership(enemy1, 50)
	-- order guys around bunker to get into position behind when player near
	
	orderGroupLoc(enemy1Force1, DORDER_SCOUT, rBlkX, rBlkY)
	
	-- build first ones so AI triggered
	buildDroid(buggy, enm1, enemy1, 1)
	repeatingEvent(enm1Fact1Evnt, 40.0)
	deactivateEvent(enm1Start1Evnt)
end
conditionalEvent(enm1Start1Evnt, "droidInArea(player, 4032, 8000, 5440, 9024)", 1.0)

-- Enemy 2
-- build list
function enm2Fact1Evnt()
	enm2Fact1Destroyed = destroyed(enm2ID)
	if enm2Fact1Destroyed then
		deactivateEvent(enm2Fact1Evnt)
	else
		if structureIdle(enm2) and (groupCountMembers(enemy2Build) + groupCountMembers(enemy2Attack)) < enemy2Tot then
			if enm2Fact1State == 0 then
				buildDroid(trike, enm2, enemy2, 1)
				enm2Fact1State = 1
			else
				if enm2Fact1State == 1 then
					buildDroid(bloke, enm2, enemy2, 3)
					enm2Fact1State = 2
				else
					if enm2Fact1State == 2 then
						buildDroid(buggy, enm2, enemy2, 1)
						enm2Fact1State = 3
					else
						buildDroid(jeep, enm2, enemy2, 1)
						enm2Fact1State = 0
					end
				end
			end
		end
	end
end

function enm2Start1Evnt()
	buildDroid(trike, enm2, enemy2, 1)
	repeatingEvent(enm2Fact1Evnt, 40.0)
	deactivateEvent(enm2Start1Evnt)
end
conditionalEvent(enm2Start1Evnt, "droidInArea(player, 320, 9792, 6720, 13120)", 1.0)

function enemy1Atk1()
	if enm1Fact1Destroyed then
		orderGroupLoc(enemy1Force2, DORDER_SCOUT, rBlkX, rBlkY)
		
		deactivateEvent(enemy1Atk1)
	end
end
repeatingEvent(enemy1Atk1, 2.0)

function lastAttack1()
	if not anyStructButWallsLeft(enemy1) then
		groupAddArea(enemy1Fin, enemy1, 0, 0, 8191, 16383)
		orderGroupLoc(enemy1Fin, DORDER_SCOUT, enm1Ass1X, enm1Ass1Y)
	end
end
repeatingEvent(lastAttack1, 5.0)
-- setEventTrigger(lastAttack1, inactive);

function lastAttack2()
	if not anyStructButWallsLeft(enemy2) then
		groupAddArea(enemy2Fin, enemy2, 0, 0, 8191, 16383)
		orderGroupLoc(enemy2Fin, DORDER_SCOUT, enm2Ass1X, enm2Ass1Y)
	end
end
repeatingEvent(lastAttack2, 5.0)
-- setEventTrigger(lastAttack2, inactive);

-- Timed attacks if player dawdles
function attackPlayer1()
	repeatingEvent(enm1Fact1Evnt, 40.0)
	deactivateEvent(attackPlayer1)
end
delayedEvent(attackPlayer1, 180.0)

function attackPlayer2()
	repeatingEvent(enm2Fact1Evnt, 40.0)
	deactivateEvent(attackPlayer2)
end
delayedEvent(attackPlayer2, 360.0)


---------- stubs ----------

if random == nil then random = function() print("stub: random"); return 0 end end
if droidInArea == nil then droidInArea = function() print("stub: droidInArea"); return 0 end end
if anyStructButWallsLeft == nil then anyStructButWallsLeft = function() print("stub: anyStructButWallsLeft"); return 0 end end
if groupAddDroid == nil then groupAddDroid = function() print("stub: groupAddDroid"); return 0 end end
if setRetreatPoint == nil then setRetreatPoint = function() print("stub: setRetreatPoint"); return 0 end end
if orderGroupLoc == nil then orderGroupLoc = function() print("stub: orderGroupLoc"); return 0 end end
if droidInRange == nil then droidInRange = function() print("stub: droidInRange"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if objectInRange == nil then objectInRange = function() print("stub: objectInRange"); return 0 end end
if setGroupRetreatPoint == nil then setGroupRetreatPoint = function() print("stub: setGroupRetreatPoint"); return 0 end end
if groupAddGroup == nil then groupAddGroup = function() print("stub: groupAddGroup"); return 0 end end
if setPowerLevel == nil then setPowerLevel = function() print("stub: setPowerLevel"); return 0 end end
if groupAddArea == nil then groupAddArea = function() print("stub: groupAddArea"); return 0 end end
if setGroupRetreatForce == nil then setGroupRetreatForce = function() print("stub: setGroupRetreatForce"); return 0 end end
if buildingDestroyed == nil then buildingDestroyed = function() print("stub: buildingDestroyed"); return 0 end end
if createAlliance == nil then createAlliance = function() print("stub: createAlliance"); return 0 end end
if buildDroid == nil then buildDroid = function() print("stub: buildDroid"); return 0 end end
if setRetreatForce == nil then setRetreatForce = function() print("stub: setRetreatForce"); return 0 end end
if structureIdle == nil then structureIdle = function() print("stub: structureIdle"); return 0 end end
if setRetreatLeadership == nil then setRetreatLeadership = function() print("stub: setRetreatLeadership"); return 0 end end
if setAssemblyPoint == nil then setAssemblyPoint = function() print("stub: setAssemblyPoint"); return 0 end end
if setGroupRetreatLeadership == nil then setGroupRetreatLeadership = function() print("stub: setGroupRetreatLeadership"); return 0 end end
