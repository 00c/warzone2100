-- Generated by wz2lua (data file)
version(0) -- version of the script API this script is written for
-- slo: "GenExp.slo"

-- Generic VLO file template for start/expand levels

-- Cam2a.vlo

-- Next level stuff
-- points to next level in GameDesc.lev
NextLev = "SUB_2_1S"
-- don't try to load next one
lastLev = true

-- Define Players/Enemies
-- MAX 2. Must define same as number of enemy players given next
numEnemies = 2
-- player number, eg 1 for New Paradigm, 2 for Collective, 3 for Nexus, 7 for scavengers
enemy = {}
enemy[0] = 1
-- scavenger player number
enemy[1] = 7
-- ally player with this player number, currently self.
alliancePlayer = 0
-- ally enemy with this player number, currently scavenger
allianceEnemy = {}
allianceEnemy[0] = 7
-- ally scavengers with the player (useful for civilians)
allianceEnemy[1] = 0
-- TRUE if want enemies to use each others targets, otherwise mark FALSE
allianceFlag = false

-- Starting Enemy Power
-- starting power for enemy[0]	(New Paradigm in this case)
power = {}
power[0] = 300
-- starting power for enemy[1]	(Scavengers in this case)
power[1] = 1000

-- Structure Limits
-- Leave these as are, for Player only!
-- MAX 5. Must be same as number of limits given next
numStrucStats = 5
strucStat = {}
strucStat[0] = "A0PowerGenerator"
strucLimit = {}
strucLimit[0] = 1
strucStat[1] = "A0ResourceExtractor"
strucLimit[1] = 200
strucStat[2] = "A0ResearchFacility"
strucLimit[2] = 5
strucStat[3] = "A0LightFactory"
strucLimit[3] = 5
strucStat[4] = "A0CommandCentre"
strucLimit[4] = 1

-- Initialisation
-- starting view centre (in world units)
centreX = 11200
-- needs to be set correctly
centreY = 12864
-- scroll limits (in tile units)
scrollX1 = 64
-- needs to be set correctly
scrollY1 = 64
scrollX2 = 128
scrollY2 = 128
-- starting radar: 0=zoomed out, 2=zoomed in
zoomLevel = 0

-- MAX 8. Number of Landing zones/areas can't build on (LZX[0], LZY[0] = player's LZ)
numLZ = 2
-- coords of player's LZ in tile units
LZX = {}
LZX[0] = 0
LZY = {}
LZY[0] = 0
-- coords of other LZ's
LZX[1] = 0
LZY[1] = 0

-- don't set reinforcements (done in another script)
reinfOff = true
-- -1 for no reinforcements, otherwise time in 10ths of seconds (only for Submaps)
ReinforceTime = -1

-- Transport exit and entry
-- need setting for submaps only
-- player transport entry coord in tile units
transX = {}
transX[0] = 1
transY = {}
transY[0] = 1
-- player transport exit coord in tile units
transX[1] = 1
transY[1] = 1

-- for each enemy that requires enemy transports landing (handled as a phantom factory)
-- define transport entry exit for each enemy!
entryX = {}
entryX[0] = 0
-- unnecessary if no enemy transports (defaults 0)
entryY = {}
entryY[0] = 0
-- leave as 0 if don't want a transport adding for this enemy
exitX = {}
exitX[0] = 0
exitY = {}
exitY[0] = 0

-- starting technology for enemy
-- NOTE: need to set first number in array for enemy player
-- second number needs to correspond to numTechs[enemy]
-- MAX 2 enemies, 10 technologies
-- number of technologies to follow for enemy[0]
numTechs = {}
numTechs[0] = 2
startTech = {}
startTech[0] = {}
startTech[0][0] = "R-Wpn-MG-Damage03"
startTech[0][1] = "R-Wpn-Rocket-Damage02"

-- number of technologies to follow for enemy[1]
numTechs[1] = 3
startTech[1] = {}
startTech[1][0] = "R-Vehicle-Body01"
startTech[1][1] = "R-Sys-Spade1Mk1"
startTech[1][2] = "R-Vehicle-Prop-Wheels"

-- Briefings
-- Pete Johnson handles these so please leave setup as he has them!
-- MAX 2. Needs to be same as the number of briefings given next
numBriefs = 1
brief = {}
brief[0] = "MB2A_MSG"
-- 0 remove after playing, 1 keep, 2 don't play immediately
briefVal = {}
briefVal[0] = 2

-- Objectives
-- any blips placed at the start of a mission are done here
-- MAX 3. Needs to be the same as the number of objective blips given next
numObjectives = 1
-- in prox<name>.txt files (need updating)
objective = {}
objective[0] = "DELETE_ME"
-- world coords where player's droids need to get close to to remove the blip
objectiveX = {}
objectiveX[0] = 6848
objectiveY = {}
objectiveY[0] = 7104

-- Victory Conditions
-- NOTE: always assumes victory condition of: number of artifacts collected = victoryArt
-- number of victory conditions to be met (not including artifacts)
numVictory = 4
-- DOESN'T need to be same as number given next (these are set TRUE/FALSE)
-- if victory condition required. Can have 2 set to TRUE and numVictory = 1
-- This will then let player win if EITHER condition is true!
-- Use numVictory of 0 if just want player to get artifacts

-- these now done as integers NOT bools!! Use -1 for False, # for True (often an index to check!)
-- for this reason must specify ALL victory[]!
-- all enemy vehicles and structures need to be killed
victory = {}
victory[0] = 1
-- all players vehicles at REGION index # (eg LZ REGION)
victory[1] = 10
-- number of objectives to get to (uses objective[0] to objective[#])
victory[2] = 1
-- number of bases to destroy (uses base[0] to base[#])
victory[3] = 2

--[[might use these later if necessary
victory[4]	int		-1	//kill all UNITS belonging to enemy # index
victory[5]	int		-1	//kill all STRUCTURES belonging to enemy # index
victory[6]	int		-1	//REGION index to check for defences built
victory[7]	int		-1	//# of EXTRA defences to build in REGION]]--
-- use this to communicate extra victory conditions in another script run beside the generic one
linkVictory = true

-- Failure Conditions
-- Extra conditions above ALL player units and structures dead, or TIME LIMIT expired
-- numFail	int		0	//number required to be met (usually one if used!)
-- only one of these has to be met
-- Use -1 for False, # for True (often an index to check!)

-- DROID # index all got to REGION (no longer a group #)
fail = {}
fail[0] = 0
-- REGION index for above (these count as one condition!)
fail[1] = 10
-- "Enemy Escaping" played for failure
failSnd = "pcv632.ogg"

--[[might use these later if necessary
fail	[2]	int		-1	//only Player UNITS need to be killed to lose
fail	[3]	int		-1	//only Player STRUCTURES need to be killed to lose
fail	[4]	int		-1	//Structure index # to be destroyed to lose????]]--
-- use this to communicate extra fail conditions in another script run beside the generic one
linkFail = true
-- use this to prevent generic script failing when time is up!
-- don't use time limit as a fail in GenExp
noTimeLimit = true

-- Artifacts
-- number of artifacts required for victory (must be <= numArt)
victoryArt = 0
-- MAX 6. Number of artifacts in total (even if not in game, but added as extra research!)
numArt = 0

-- new improved way of doing artifacts
-- artType: 0 = artifact starts on map, 1 = get from STRUCTURE, 2 = get from FEATURE, 3 = get from DROID, 4 = at end of level
-- artVal: index to relevant type, ie FEATURE(crate), FEATURE, STRUCTURE, DROID
-- artX, artY: artifact coords (this is updated for DROIDS moving by script, but still needs an array to store them in!)
-- already on map
artType = {}
artType[0] = 0
-- index into features
artVal = {}
artVal[0] = 0
-- coords of artifact
artX = {}
artX[0] = 576
artY = {}
artY[0] = 3008
-- research topic given when artifact collected
artComp = {}
artComp[0] = "R-Wpn-Flamer01Mk1"

-- get from structure
artType[1] = 1
-- index into structures when structure destroyed
artVal[1] = 0
-- coords to place artifact
artX[1] = 3136
artY[1] = 832
-- research topic given when artifact collected
artComp[1] = "R-Defense-Tower01"

-- get from feature
artType[2] = 2
-- index into features
artVal[2] = 1
-- coords to place artifact when feature destroyed
artX[2] = 4416
artY[2] = 2752
-- research topic given when artifact collected
artComp[2] = "R-Sys-Sensor-Turret01"

-- get from droid
artType[3] = 3
-- index into droids
artVal[3] = 0
artX[3] = 5696
artY[3] = 1856
-- research topic given when artifact collected
artComp[3] = "R-Vehicle-Prop-Halftracks"

-- given on completing mission (don't include when counting for victoryArt!)
artType[4] = 4
-- not used for this type, leav as 0
artVal[4] = 0
-- not used for this type, leav as 0
artX[4] = 0
-- not used for this type, leav as 0
artY[4] = 0
-- research topic given when artifact collected
artComp[4] = "R-Wpn-Mortar01Lt"

-- ********************************************
-- lists of stuff referred to by index number
-- ********************************************

-- ********************************************
-- FEATURES (inc crates, by ID number)	MAX = 10
-- crate artifact ID number(already on map)
features = {}
features[0] = 649
-- feature to get next artifact, eg warehouse
features[1] = 661

-- ********************************************
-- STRUCTURES (by ID number)		MAX = 10
-- factory 0, gives artifact
structures = {}
structures[0] = getStructureByID(223)
-- some other structure, eg gives an artifact
structures[1] = getStructureByID(650)
-- factory 1
structures[2] = getStructureByID(481)
-- factory 2
structures[3] = getStructureByID(623)

-- ********************************************
-- DROIDS (by ID number)		MAX = 10
-- gives up artifact when dead at its coords
droids = {}
droids[0] = 3279
-- this is a sensor droid that acts as sesnor for group 1 IDF (indexes match!)
droids[1] = 1234

-- ********************************************
-- list of templates (by name)		 MAX = 20
-- ********************************************
-- keep each enemies templates together
-- scavenger templates
templates = {}
templates[0] = "BaBaPeople"
templates[1] = "BarbarianTrike"
templates[2] = "BarbarianBuggy"
templates[3] = "BabaJeep"
templates[4] = "BabaRKJeep"
templates[5] = "BarbarianRKBuggy"
templates[6] = "BabaBusCan"
templates[7] = "BabaFireCan"

-- New Paradigm templates
templates[8] = "NP-M-MdCannon-Halftrack"
templates[9] = "NP-H-MdCannon-Tracks"
templates[10] = "NP-M-BB-Halftrack"
templates[11] = "NP-H-HvyCannon-Tracks"
templates[12] = "NP-M-Sensor-Wheels"
templates[13] = "NP-M-HvyMortar-Halftrack"

-- NP Cyborg Templates
templates[14] = "CyborgChain01Ground"
templates[15] = "CyborgFlamer01Grd"
templates[16] = "CyborgCannon01Grd"


-- ********************************************
-- coordinates (world coords)		MAX = 10
-- ********************************************
-- factory 0 Assembly
coordsX = {}
coordsX[0] = 3136
coordsY = {}
coordsY[0] = 1472
-- factory 1 Assembly (and valley group retreat!)
coordsX[1] = 5824
coordsY[1] = 2368
-- factory 2 Assembly
coordsX[2] = 5184
coordsY[2] = 6592

-- 1st waypoint for group 0
coordsX[3] = 832
coordsY[3] = 6848

-- 2nd waypoint for group 0
coordsX[4] = 1856
coordsY[4] = 7104

-- group 2 waypoint1
coordsX[5] = 2624
coordsY[5] = 5952
-- group 2 waypoint2
coordsX[6] = 2752
coordsY[6] = 6720
-- group 2 waypoint3
coordsX[7] = 2496
coordsY[7] = 7488
-- group 2 waypoint4
coordsX[8] = 1728
coordsY[8] = 7744

-- ********************************************
-- regions (world coords)		MAX = 20
-- ********************************************
-- enemy base0 blip
regionsX1 = {}
regionsX1[0] = 2624
regionsY1 = {}
regionsY1[0] = 448
regionsX2 = {}
regionsX2[0] = 3648
regionsY2 = {}
regionsY2[0] = 1344
-- enemy base1 blip
regionsX1[1] = 4800
regionsY1[1] = 1472
regionsX2[1] = 6464
regionsY2[1] = 2880
-- enemy base2 blip
regionsX1[2] = 4288
regionsY1[2] = 5952
regionsX2[2] = 6208
regionsY2[2] = 7488

-- base 0 Factory trigger region
regionsX1[3] = 320
regionsY1[3] = 4160
regionsX2[3] = 2368
regionsY2[3] = 5184
-- group 0 trigger region
regionsX1[4] = 1984
regionsY1[4] = 832
regionsX2[4] = 3008
regionsY2[4] = 2368
-- group 3 trigger region
regionsX1[5] = 3904
regionsY1[5] = 2496
regionsX2[5] = 5312
regionsY2[5] = 4288

-- group 0 defining region
regionsX1[6] = 3136
regionsY1[6] = 13632
regionsX2[6] = 3520
regionsY2[6] = 14016
-- group 1 defining region
regionsX1[7] = 4288
regionsY1[7] = 8000
regionsX2[7] = 5056
regionsY2[7] = 8640
-- group 2 defining region
regionsX1[8] = 5184
regionsY1[8] = 7232
regionsX2[8] = 5696
regionsY2[8] = 7744
-- group 3 defining region
regionsX1[9] = 4928
regionsY1[9] = 6592
regionsX2[9] = 5440
regionsY2[9] = 7104

-- LZ region for victory
regionsX1[10] = 2624
regionsY1[10] = 448
regionsX2[10] = 3648
regionsY2[10] = 1344

-- ********************************************
-- sector Stuff
-- ********************************************
-- sectors to attack (for scout and attack groups only)
-- split map into regions, groups can then go to random positions in each region
-- as their waypoints, looking for player targets.

-- MAX = 20
sectorsX1 = {}
sectorsX1[0] = 10432
sectorsY1 = {}
sectorsY1[0] = 12736
sectorsX2 = {}
sectorsX2[0] = 14272
sectorsY2 = {}
sectorsY2[0] = 15552

sectorsX1[1] = 8896
sectorsY1[1] = 13760
sectorsX2[1] = 10304
sectorsY2[1] = 15040

sectorsX1[2] = 6336
sectorsY1[2] = 13760
sectorsX2[2] = 8768
sectorsY2[2] = 14144

sectorsX1[3] = 2112
sectorsY1[3] = 12736
sectorsX2[3] = 6336
sectorsY2[3] = 14784

sectorsX1[4] = 1600
sectorsY1[4] = 10176
sectorsX2[4] = 5952
sectorsY2[4] = 12608

sectorsX1[5] = 4672
sectorsY1[5] = 8640
sectorsX2[5] = 5696
sectorsY2[5] = 10048

-- ********************************************
-- Enemy Base Blips
-- ********************************************
-- MAX = 5. Must be same as number of bases listed next
numBases = 0
-- enemy player number who owns base, ie enemy[0]
basePlayer = {}
basePlayer[0] = 0
-- enemy base blip message (prox.txt)
baseMsg = {}
baseMsg[0] = "FAST_BASE1"
-- index to regions that defines base boundaries (blip appears when player sees any structure in these boundaries), also area to destroy walls when base is dead.
baseRegion = {}
baseRegion[0] = 0
-- sound to play when first seen (index to baseSnd)	Superior Weapons
baseWav1 = {}
baseWav1[0] = 2
-- sound to play when base dead (index to baseSnd)	Eradicated
baseWav2 = {}
baseWav2[0] = 3

-- enemy player who owns base, ie enemy[1]
basePlayer[1] = 1
baseMsg[1] = "FAST_BASE2"
-- index to regions
baseRegion[1] = 1
-- index to baseSnd	enemy detected
baseWav1[1] = 0
-- index to baseSnd	Eradicated
baseWav2[1] = 3

-- ********************************************
-- Enemy Groups
-- ********************************************
-- group MAX = 10
numGroups = 6

-- group 0 (Ambush group) Use this type to get units moving in set patterns once triggered
-- 0 = Ambush/Patrol
grpType = {}
grpType[0] = 0
-- player index, ie enemy[0]
grpPlayer = {}
grpPlayer[0] = 0
-- index in regions array to define group
grpRegion = {}
grpRegion[0] = 6
-- -1 = no time trigger
grpTimeGo = {}
grpTimeGo[0] = -1
-- index in regions to use as trigger
grpRegionGo = {}
grpRegionGo[0] = 4
-- player number (0-7) that needs to enter trigger region to trigger group
grpWhoGo = {}
grpWhoGo[0] = 0
-- -1 = don't set morale/leadership/retreat
grpMorale = {}
grpMorale[0] = -1
-- leave zero if morale not set
grpLeadership = {}
grpLeadership[0] = 0
-- leave zero if morale not set
grpRetreatXY = {}
grpRetreatXY[0] = 0
-- starting waypoint (goes here when triggered)
grpPosStart = {}
grpPosStart[0] = 3
-- Minimum index in coords array for waypoints
grpPosMin = {}
grpPosMin[0] = 3
-- Maximum index in coords array for waypoints
grpPosMax = {}
grpPosMax[0] = 4
-- Step increase for next 'waypoint'
grpPosStep = {}
grpPosStep[0] = 1
-- 0 = stop when get to last waypoint
grpPosType = {}
grpPosType[0] = 0
-- -1 = any factory can reinforce this group
grpFactory = {}
grpFactory[0] = -1
-- 0 = don't reinforce (ideal size. If less than this factory will reinforce)
grpIdealSize = {}
grpIdealSize[0] = 0

-- group 1 (IDF group) Use this group to link to a sensor of same index (not quite finished in SLO, but shouldn't crash)
-- -1 = Indirect Fire (IDF). There must be a corresponding sensor droid with same index
grpType[1] = -1
-- in this case 1, ie droids[1] must be a sensor droid. Don't use this type if too confusing!
-- player index, ie enemy[0]
grpPlayer[1] = 0
-- index in regions array to define group
grpRegion[1] = 7
-- -1 = don't use time trigger (sensor will move this IDF group)
grpTimeGo[1] = -1

-- -1 = don't use a region to trigger (sensor will move this IDF group)
grpRegionGo[1] = -1
-- leave zero if region trigger not used
grpWhoGo[1] = 0
-- pretty timid! morale check when group size is 90% of original
grpMorale[1] = 90
-- 25% chance of not running away when morale checked
grpLeadership[1] = 25
-- retreat coords(index in coords array), points to factory 0's assembly point
grpRetreatXY[1] = 0
-- don't use waypoints
grpPosStart[1] = -1
-- leave 0 if waypoints not used
grpPosMin[1] = 0
-- leave 0 if waypoints not used
grpPosMax[1] = 0
-- leave 0 if waypoints not used
grpPosStep[1] = 0
-- leave 0 if waypoints not used
grpPosType[1] = 0
-- reinforce from factory 0
grpFactory[1] = 0
-- ideal size. If less than this factory will reinforce
grpIdealSize[1] = 6

-- group 2 (defence group) Use this group to defend a base (or whole map if desired). Can be on a patrol route using waypoints, will only deviate from this if a structure in grpRegionGo is attacked, then when attacker destroyed, continues on patrol route
-- 1 = Defence
grpType[2] = 1
-- player index, ie enemy[1]
grpPlayer[2] = 1
-- index in regions array to define group
grpRegion[2] = 8
-- 2 = 20s before starts to move (always make >= 0 for defence forces)
grpTimeGo[2] = 2
-- index into regions to protect (usually a base blip region)
grpRegionGo[2] = 0
-- player number (0-7) that needs to attack structures in  trigger region to make this group break off patrol and defend
grpWhoGo[2] = 0
-- pretty solid! morale check when group size is 55% of original
grpMorale[2] = 55
-- 75% chance of not running away when morale checked
grpLeadership[2] = 75
-- retreat (index in coords array) factory 1 assembly point
grpRetreatXY[2] = 1
-- index in coords array (depends on grpType)
grpPosStart[2] = 7
-- Minimum index in coords array
grpPosMin[2] = 5
-- Maximum index in coords array
grpPosMax[2] = 8
-- Step increase for next 'waypoint'
grpPosStep[2] = -1
-- 1 = loop
grpPosType[2] = 1
-- index factory to reinforce group. -1 = any factory.
grpFactory[2] = 0
-- ideal size. If less than this factory will reinforce
grpIdealSize[2] = 2

-- group 3 (scout group). This uses SECTORS, and will flag targets for use by attack groups. will run away if sees more targets than units in its own group even if morale not set.
-- 2 = Scout, 3 = Attack...
grpType[3] = 2
-- player index, ie enemy[1]
grpPlayer[3] = 1
-- index in regions array to define group
grpRegion[3] = 9
-- 40s time trigger
grpTimeGo[3] = 4
-- index in regions to use as trigger (can use time AND region triggers)
grpRegionGo[3] = 5
-- player number (0-7) that needs to enter trigger region to trigger group
grpWhoGo[3] = 0
-- no morale checks
grpMorale[3] = -1
-- leave zero if morale not set
grpLeadership[3] = 0
-- leave zero if morale not set
grpRetreatXY[3] = 0
-- index in SECTORS array (scout groups use sectors)
grpPosStart[3] = 3
-- Minimum index in coords array
grpPosMin[3] = 0
-- Maximum index in coords array
grpPosMax[3] = 4
-- Step increase for next 'waypoint'
grpPosStep[3] = 1
-- 2 = pingpong
grpPosType[3] = 2
-- index factory to reinforce group. -1 = any factory.
grpFactory[3] = -1
-- ideal size. If less than this factory will reinforce
grpIdealSize[3] = 4

-- group 4 (attack group). Again uses SECTORS. Will patrol sectors until targets found, by scout or attack groups, then goes to target coords. This group doesn't exist at start, but is reinforced by factory 1 which is a phantom factory (used for units coming in off edge of map)
-- 3 = Attack...
grpType[4] = 0
-- player index, ie enemy[0]
grpPlayer[4] = 0
-- doesn't exist at start, made up from factories
grpRegion[4] = -1
-- 20s time trigger (always make >= 0 for defence forces)
grpTimeGo[4] = 5
-- no region. index in regions array as trigger
grpRegionGo[4] = -1
-- leave zero if region trigger not used
grpWhoGo[4] = 0
-- morale = 90%
grpMorale[4] = 90
-- leadership value = 45%
grpLeadership[4] = 45
-- retreat (index in coords array) factory 1 assembly
grpRetreatXY[4] = 1
-- index in SECTORS array (attack groups use sectors)
grpPosStart[4] = 4
-- Minimum index in SECTORS array
grpPosMin[4] = 0
-- Maximum index in SECTORS array
grpPosMax[4] = 4
-- Step increase for next 'waypoint'
grpPosStep[4] = -1
-- 3 = random thru waypoints
grpPosType[4] = 3
-- index factory to reinforce group. -1 = any factory.
grpFactory[4] = 1
-- ideal size. If less than this factory will reinforce
grpIdealSize[4] = 6

-- group 5. Transport example group (can be any type). Main point is that it is reinforced by factory 2, which is a transport type phantom factory.
-- 0 = Ambush/Patrol
grpType[5] = 0
-- player index, ie enemy[0]
grpPlayer[5] = 0
-- doesn't exist at start, made up from factories
grpRegion[5] = -1
-- go immediately
grpTimeGo[5] = 0
-- no region. index in regions array as trigger
grpRegionGo[5] = -1
-- player number to cross trigger region (may not need?)
grpWhoGo[5] = 0
-- morale = 50%
grpMorale[5] = 25
-- leadership value = 75%
grpLeadership[5] = 50
-- retreat (index in coords array) base2 assembly
grpRetreatXY[5] = 1
-- index in coords array (depends on grpType)
grpPosStart[5] = 7
-- Minimum index in coords array
grpPosMin[5] = 5
-- Maximum index in coords array
grpPosMax[5] = 8
-- Step increase for next 'waypoint'
grpPosStep[5] = 1
-- 1 = loop
grpPosType[5] = 1
-- index factory to reinforce group. This points to 'transport' factory
grpFactory[5] = 2
-- ideal size. If less than this factory will reinforce
grpIdealSize[5] = 10

-- Factories
-- MAX = 10
numFactories = 3

-- typical factory
-- index to structures
factID = {}
factID[0] = 0
-- index to assembly point. -1 for don't set
factAssXY = {}
factAssXY[0] = 0
-- delay before starting production in 10s
factTimeGo = {}
factTimeGo[0] = -1
-- region index (assume WhoGo = 0, ie player has to enter this region)
factRegionGo = {}
factRegionGo[0] = 3
-- index to starting template
factTempMin = {}
factTempMin[0] = 0
-- index to maximum template
factTempMax = {}
factTempMax[0] = 2
-- 50s .Time in 10s for factory to try to produce again
factEvery = {}
factEvery[0] = 5

-- special case phantom factory
-- phantom factory, places units on map (usually edge)
factID[1] = -1
-- index to coords to place generated units
factAssXY[1] = 1
-- 60s delay before starting production  (multiples of 10s)
factTimeGo[1] = 6
-- -1 = no region for trigger (assume WhoGo = 0)
factRegionGo[1] = -1
-- index to starting template
factTempMin[1] = 0
-- index to maximum template
factTempMax[1] = 3
-- 5 mins .Time in 10s for factory to try to produce again
factEvery[1] = 30

-- transport type phantom factory
-- phantom factory, uses transport
factID[2] = -2
-- index to LZs (point to correct one for enemy number, eg 2 for player 2 Collective)
factAssXY[2] = 1
-- delay before starting production in 10s
factTimeGo[2] = -1
-- region to trigger transport
factRegionGo[2] = 5
-- index to starting template
factTempMin[2] = 1
-- index to maximum template
factTempMax[2] = 4
-- 6 mins .Time in 10s for factory to produce again
factEvery[2] = 36

-- 'Globals'
-- These should be same in each file, but may need slight alterations
-- player's player number
player = 0
crate = "Crate"
-- 171				//range to artifact about 1.5 tiles
artRange = 200
-- range to objective 5 Tiles
objectiveRange = 640
-- range to waypoint 2ish tiles
wayRange = 300
-- range for target spotting
targetRange = 768
-- maximum number of targets to store for each enemy
targetMax = 4
-- mission failed
lostSnd = "pcv470.ogg"
-- Base Under Attack
attackSnd1 = "pcv337.ogg"
-- artifact sounds
artSnd1 = "pcv351.ogg"
artSnd2 = "pcv352.ogg"
-- for enemy transports
transporter = "Transporter"
endMsg = "END"

-- base WAVs. MAX = 5
-- Enemy Base Detected
baseSnd = {}
baseSnd[0] = "pcv379.ogg"
-- Enemy Base Detected
baseSnd[1] = "pcv379.ogg"
-- Enemy Base Detected
baseSnd[2] = "pcv379.ogg"
-- Enemy base eradicated
baseSnd[3] = "pcv394.ogg"

-- NEW STUFF for trucks
-- trucksOn		BOOL			TRUE		//switch for using trucks (won't work without it!)
-- Defence Type Structures for any enemy to build
-- MAX = 5
numDefences = 2
defences = {}
defences[0] = "PillBox2"
defences[1] = "PillBox3"
-- ideal number of defences to build
maxDefence = 3
-- structures to defend
-- MAX = 5
numToDefend = 2
toDefend = {}
toDefend[0] = "A0ResourceExtractor"
-- "A0PowerGenerator"
toDefend[1] = "A0CommandCentreCO"
-- extra Globals
oilRes = "OilResource"
-- range for truck to check for defendable structures
truckRange = 1024
-- range for defences to be for defendable structures
defRange = 512
-- end of NEW STUFF

-- NEW STUFF FOR THREAT ASSESSMENT
-- this only works on groups with Morale Values
-- if not declared just won't do anything!!
-- value for light vehicles
threatLight = 2
-- value for medium vehicles
threatMedium = 4
-- value for large vehicles
threatHeavy = 8
-- range to check for enemy and player threats
threatRange = 750
-- end of NEW STUFF

-- NEW STUFF fro RETURN TO LZ type victory condition blip and audio
-- must be set true to activate
retLZFlag = true
-- for victory condition of get all player stuff to region
retLZSnd = "pcv427.ogg"
-- Blip for LZ
retLZBlip = "C22_LZ"

--run the code
dofile('genexp_logic.lua')
