-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
-- blipFlag;
numart = 0
newDroidFactory = nil

-- structure limit stuff
-- public	STRUCTURESTAT		powerModuleHack;

-- Win or lose
-- public		TEMPLATE	transporter;
totDroids = 0

-- Base Under Attack Stuff
hitStruc = nil
attackerObj = nil
t = 0

-- Transport Entry/Exit coords

-- required for enemy transports landing
transportDroid = nil
loadDroid = nil
reinforceTemplate = nil
-- has transport been triggered?
transFlag = false

-- Briefing stuff
-- , winMsg;

-- LZ Message
playerTransOnMap = false

-- Proximity: Artifacts

art1Get = nil
-- public		INTMESSAGE	art1Msg;

-- player Bonus Research topics given at end of mission
-- need to be declared with value >= numResP0, numResP1, etc.
count = 0

-- Proximity: Enemy




-- AI STUFF

-- Enemy Waypoints

-- Enemy Groups
Recovery1 = Group()
Recovery2 = Group()
artGroup = Group()
temp1 = 0
temp2 = 0
wayCount = 0
testID = nil

-- enemy1 variables
enemy1Build = Group()
enemy1Attack = Group()
enemy1Start = Group()
enemy1Fin = Group()
enemy1Force1 = Group()
enemy1Force2 = Group()
enemy2Build = Group()
enemy2Attack = Group()
enemy2Start = Group()
enemy2Fin = Group()
enemy1Guard = Group()
enemy2Guard = Group()
Strike1 = Group()
Ambush1 = Group()
Reserve1 = Group()
Scav1 = Group()
Scav2 = Group()
Scav3 = Group()

tempx1 = 0
tempx2 = 0
tempy1 = 0
tempy2 = 0
-- for keeping track of casualties
AmbushTot = 0
Scav2Health = 0

attackedStruct = nil
attacker = nil

-- temporary variables
newDroid = nil
moveX = 0
moveY = 0
xdiff = 0
ydiff = 0
-- default leadership for enemy2
ld = 0
-- for additional briefing when NP have picked up artifact
briefFlag = false

-- values for build lists start here
-- General Values
-- limit build to this number
-- limit build to this number

-- Enemy Tactics

-- enemy1
enm1aState = 0
enm1bState = 0
enm1cState = 0
enm1aDestroyed = false
enm1bDestroyed = false
enm1cDestroyed = false

-- Values for build Commands
comTruck1 = 0

-- Structures to be built

-- Starting Technology

-- event art1SeenEvnt;

function startEvnt()
	centreViewPos(7 * 128, 56 * 128)
	-- make scavengers and New paradigm allies (just in case!)
	createAlliance(enemy1, enemy2)
	-- set scroll limits
	-- setScrollParams(0, 0, 64, 64);			//limit scroll
	-- set zoom Level 64x64
	setRadarZoom(1)
	-- stop player building on LZ#1
	setLandingZone(6, 55, 8, 57)
	-- call in transport
	flyTransporterIn(player, entryX, entryY, false)
	setTransporterExit(player, exitX, exitY)
	-- add enemy transport (once!)
	setNoGoArea(12, 10, 14, 12, enemy2)
	transportDroid = addDroidToMissionList(transporter, enemy2)
	
	setPowerLevel(pow1, enemy1)
	setPowerLevel(pow2, enemy2)
	-- Blip Given at start
	addMessage(obj1, PROX_MSG, player, false)
	-- allow to build stuff
	setStructureLimits(powerGen, numPow, 0)
	setStructureLimits(oilDerrick, numExt, 0)
	setStructureLimits(research, numRes, 0)
	setStructureLimits(factory, numFac, 0)
	setStructureLimits(command, 0, player)
	setStructureLimits(comRelay, 0, player)
	enableStructure(command, player)
	enableStructure(powerGen, 0)
	enableStructure(oilDerrick, 0)
	enableStructure(research, 0)
	enableStructure(factory, 0)
	-- enableStructure(powerModuleHack, 0);
	-- set transport time
	setReinforcementTime(ReinforceTime/10.0)
	-- add enemy transport!!
	-- addDroid(transporter, 1728, 1472, enemy2);		//place enemy transporter!!!
	-- get Enemy Recovery Group to pick up artifact
	groupAddArea(Recovery1, enemy2, 4544, 3520, 4800, 3776)
	
	-- player specific technology startups
	count = 0
	while count < numtecE1 do
		completeResearch(tecE1[count], enemy1)
		count = count + 1
	end
	count = 0
	while count < numtecE2 do
		completeResearch(tecE2[count], enemy2)
		count = count + 1
	end
	
	deactivateEvent(startEvnt)
	addMessage(MissionBrief, MISS_MSG, 0, false)
	flashOff(INTELMAP)
end
callbackEvent(startEvnt, CALL_GAMEINIT)


-- Events: Artifacts
function art1TakeEvnt()
	if art1ID ~= nil then
		deactivateEvent(art1EnmTakeEvnt)
		deactivateEvent(recoveryDead)
		deactivateEvent(enemyWayEvnt)
		-- setEventTrigger(art1SeenEvnt, inactive);
		numart = numart + 1
		-- playSound(art1Snd2, player);
		playSoundPos(art1Snd2, player, art1ID.x, art1ID.y, art1ID.z)
		destroyFeature(art1ID)
		
		-- if (blipFlag > 0)
		-- {
		-- removeMessage(art1Msg, PROX_MSG, player);
		-- }
		
		enableResearch(art1Comp, player)
		deactivateEvent(art1TakeEvnt)
	end
end
conditionalEvent(art1TakeEvnt, "droidInRange(player, art1X, art1Y, 171)", 1.0)

-- Events: Enemies
function enm1DeadEvnt()
	killStructsInArea(enemy1, REF_WALL, 3136, 4288, 5056, 7616, true, true)
	-- remove corner walls in base
	killStructsInArea(enemy1, REF_WALLCORNER, 3136, 4288, 5056, 7616, true, false)
	removeMessage(enm1Msg, PROX_MSG, player)
	-- playSound(enm1Snd2, player);
	playSoundPos(enm1Snd2, player, 4288, 4928, 0)
	deactivateEvent(enm1DeadEvnt)
end

function enm1SeenEvnt()
	addMessage(enm1Msg, PROX_MSG, player, false)
	-- playSound(enm1Snd1, player);
	playSoundPos(enm1Snd1, player, 4288, 4928, 0)
	conditionalEvent(enm1DeadEvnt, "numStructsButNotWallsInArea(enemy1, 3136, 4288, 5056, 7616) == 0", 2.0)
	deactivateEvent(enm1SeenEvnt)
end
conditionalEvent(enm1SeenEvnt, "seenStructInArea(player, enemy1, false, 3136, 4288, 5056, 7616)", 1.0)

function enm2DeadEvnt()
	killStructsInArea(enemy1, REF_WALL, 5696, 5312, 8000, 8000, true, true)
	-- remove corner walls in base
	killStructsInArea(enemy1, REF_WALLCORNER, 5696, 5312, 8000, 8000, true, false)
	removeMessage(enm2Msg, PROX_MSG, player)
	-- playSound(enm2Snd2, player);
	playSoundPos(enm2Snd2, player, 7232, 7104, 0)
	deactivateEvent(enm2DeadEvnt)
end

function enm2SeenEvnt()
	addMessage(enm2Msg, PROX_MSG, player, false)
	-- playSound(enm2Snd1, player);
	playSoundPos(enm2Snd1, player, 7232, 7104, 0)
	conditionalEvent(enm2DeadEvnt, "numStructsButNotWallsInArea(enemy1, 5696, 5312, 8000, 8000) == 0", 2.0)
	deactivateEvent(enm2SeenEvnt)
end
conditionalEvent(enm2SeenEvnt, "seenStructInArea(player, enemy1, false, 5696, 5312, 8000, 8000)", 1.0)

function enm3DeadEvnt()
	killStructsInArea(enemy1, REF_WALL, 3392, 448, 8000, 1984, true, true)
	-- remove corner walls in base
	killStructsInArea(enemy1, REF_WALLCORNER, 3392, 448, 8000, 1984, true, false)
	removeMessage(enm3Msg, PROX_MSG, player)
	-- playSound(enm3Snd2, player);
	playSoundPos(enm3Snd2, player, 7616, 576, 0)
	deactivateEvent(enm3DeadEvnt)
end

function enm3SeenEvnt()
	addMessage(enm3Msg, PROX_MSG, player, false)
	-- playSound(enm3Snd1, player);
	playSoundPos(enm3Snd1, player, 7616, 576, 0)
	conditionalEvent(enm3DeadEvnt, "numStructsButNotWallsInArea(enemy1, 3392, 448, 8000, 1984) == 0", 2.0)
	deactivateEvent(enm3SeenEvnt)
end
conditionalEvent(enm3SeenEvnt, "seenStructInArea(player, enemy1, false, 3392, 448, 8000, 1984)", 1.0)

-- Events: Win or Lose

-- assumes victory already checked
function nextLevEvnt()
	pause(20/10.0)
	-- give bonus research (if req'd)
	count = 0
	while count < numResP0 do
		enableResearch(resP0[count], 0)
		count = count + 1
	end
	
	-- flag next part of map
	C.gameLevel = C.gameLevel + 1
	-- setLandingZone(10, 51, 12, 53);
	enableResearch(art1Comp, player)
	removeMessage(MissionBrief, MISS_MSG, player)
	startMission(BETWEEN, NextLev)
	-- End game here for now! (don't try next mission)
	-- gameOver(true);
	
	deactivateEvent(nextLevEvnt)
end

function gameLost(_player)
	if _player ~= enemy2 then return end
	gameOverMessage(endMsg, MISS_MSG, 0, false)
	deactivateEvent(gameLost)
end

function lostYetEvnt()
	if not anyDroidsLeft(player) then
		if not anyStructButWallsLeft(player) then
			deactivateEvent(wonYetEvnt)
			deactivateEvent(timeUp)
			repeatingEvent(gameLost, 2.0)
			deactivateEvent(lostYetEvnt)
		end
	end
end
repeatingEvent(lostYetEvnt, 1.0)


-- out of time?
function timeUp()
	deactivateEvent(wonYetEvnt)
	deactivateEvent(lostYetEvnt)
	-- waits 2 seconds before ending
	repeatingEvent(gameLost, 2.0)
	deactivateEvent(timeUp)
end
callbackEvent(timeUp, CALL_MISSION_TIME)

-- All NP Droids dead	//(winLoseTrig)	//alternate victory condition, got artifact(s) and back at LZ
function wonYetEvnt()
	totDroids = numDroidsInArea(player, 0, 0, 64 * 128, 64 * 128)
	-- if (totDroids == numDroidsInArea(player, 5*128, 80*128, 13*128, 86*128))
	if totDroids == numDroidsInArea(player, 0, 6592, 1600, 8192) then
		if totDroids ~= 0 then
			if numart == 1 then
				deactivateEvent(lostYetEvnt)
				repeatingEvent(nextLevEvnt, 1.0)
				deactivateEvent(wonYetEvnt)
			end
		end
	end
end
conditionalEvent(wonYetEvnt, "not anyDroidsLeft(enemy2)", 2.4)

-- cheat button ctrl M
function cheatEvnt()
	repeatingEvent(nextLevEvnt, 1.0)
	deactivateEvent(cheatEvnt)
end
callbackEvent(cheatEvnt, CALL_MISSION_START)

-- Base Under Attack
function baseHit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= C.selectedPlayer then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if t >= 20 then
		t = 0
		if hitStruc ~= nil then
			playSoundPos(attackSnd1, C.selectedPlayer, hitStruc.x, hitStruc.y, hitStruc.z)
		else
			playSound(attackSnd1, C.selectedPlayer)
		end
	end
end
callbackEvent(baseHit, CALL_STRUCT_ATTACKED)

function everySec()
	t = t + 1
end
repeatingEvent(everySec, 1.0)

function seeBaseHit()
	if hitStruc ~= nil then
		centreView(hitStruc)
		-- flag known about!
		t = 0
	end
end
callbackEvent(seeBaseHit, CALL_MISSION_END)

-- ALl NP droids dead	(winLoseTrig)
function retLZ()
	if numart == 1 then
		addMessage(LZ_MSG, PROX_MSG, player, false)
		delayedEvent(periodicRTLZ, 0.0)
		-- addConsoleText(_("Return to LZ"), player);
		-- playSound(LZSnd, player);
		-- playSoundPos(LZSnd, player, 960, 7232, 0);
		deactivateEvent(retLZ)
	end
end
conditionalEvent(retLZ, "not anyDroidsLeft(enemy2)", 2.4)

function periodicRTLZ()
	showConsoleText(_("Return to LZ"), player)
	playSoundPos(LZSnd, player, 960, 7232, 0)
	repeatingEvent(periodicRTLZ, 30.0)
end

function removeObj1()
	removeMessage(obj1, PROX_MSG, player)
	deactivateEvent(removeObj1)
end
conditionalEvent(removeObj1, "droidInRange(player, 4160, 3904, 5 * 128)", 2.0)

-- AI EVENTS

function startup()
	setAssemblyPoint(enm1a, 4288, 5770)
	setAssemblyPoint(enm1b, 5824, 6080)
	setAssemblyPoint(enm1c, 4800, 576)
end
delayedEvent(startup, 0)

-- make up starting forces

-- set up Scavenger forces



-- deal with a droid being built by enemy1
function enemy1build(_newDroid, _newDroidFactory)
	if _newDroid.player ~= enemy1 then return end
	newDroid, newDroidFactory = _newDroid, _newDroidFactory -- wz2lua: probably these can be used as function arguments directly
	groupAddDroid(enemy1Build, newDroid)
	if groupCountMembers(enemy1Build) >= 4 then
		groupAddGroup(enemy1Attack, enemy1Build)
		-- do attack force decision here!
		-- attack player's LZ
		orderGroupLoc(enemy1Attack, DORDER_SCOUT, 896, 7168)
	end
end
callbackEvent(enemy1build, CALL_NEWDROID)


-- events for build lists start here
-- Enemy 1 Scavengers

function enm1aFactEvnt()
	enm1aDestroyed = destroyed(enm1aID)
	if enm1aDestroyed then
		deactivateEvent(enm1aFactEvnt)
	else
		if structureIdle(enm1a) and (groupCountMembers(enemy1Build) + groupCountMembers(enemy1Attack)) < enemy1Tot then
			if enm1aState == 0 then
				buildDroid(template1[4], enm1a, enemy1, 1)
				enm1aState = 1
			else
				if enm1aState == 1 then
					buildDroid(template1[3], enm1a, enemy1, 1)
					enm1aState = 2
				else
					if enm1aState == 2 then
						buildDroid(template1[6], enm1a, enemy1, 1)
						enm1aState = 3
					else
						buildDroid(template1[1], enm1a, enemy1, 3)
						enm1aState = 0
					end
				end
			end
		end
	end
end

function enm1aStartEvnt()
	repeatingEvent(enm1aFactEvnt, 30.0)
	deactivateEvent(enm1aStartEvnt)
end
conditionalEvent(enm1aStartEvnt, "droidInRange(player, enm1a.x, enm1a.y, 15 * 128)", 2.0)

-- build list Scav north Factory
function enm1bFactEvnt()
	enm1bDestroyed = destroyed(enm1bID)
	if enm1bDestroyed then
		deactivateEvent(enm1bFactEvnt)
	else
		if structureIdle(enm1b) and (groupCountMembers(enemy1Build) + groupCountMembers(enemy1Attack)) < enemy1Tot then
			if enm1bState == 0 then
				buildDroid(template1[7], enm1b, enemy1, 1)
				enm1bState = 1
			else
				if enm1bState == 1 then
					buildDroid(template1[5], enm1b, enemy1, 1)
					enm1bState = 2
				else
					if enm1bState == 2 then
						buildDroid(template1[0], enm1b, enemy1, 3)
						enm1bState = 3
					else
						buildDroid(template1[2], enm1b, enemy1, 3)
						enm1bState = 0
					end
				end
			end
		end
	end
end

function enm1bStartEvnt()
	repeatingEvent(enm1bFactEvnt, 30.0)
	deactivateEvent(enm1bStartEvnt)
end
conditionalEvent(enm1bStartEvnt, "droidInRange(player, enm1b.x, enm1b.y, 15 * 128)", 2.0)

function lastAttack1()
	if not anyStructButWallsLeft(enemy1) then
		groupAddArea(enemy1Fin, enemy1, 0, 0, 64 * 64, 64 * 64)
		orderGroupLoc(enemy1Fin, DORDER_SCOUT, playerX, playerY)
	end
end
repeatingEvent(lastAttack1, 5.0)
-- setEventTrigger(lastAttack1, inactive);

function lastAttack2()
	if not anyStructButWallsLeft(enemy2) then
		groupAddArea(enemy2Fin, enemy1, 0, 0, 64 * 64, 64 * 64)
		orderGroupLoc(enemy2Fin, DORDER_SCOUT, playerX, playerY)
	end
end
repeatingEvent(lastAttack2, 5.0)
-- setEventTrigger(lastAttack2, inactive);

-- Generic-ish go investigate nearby structures if under attack!

function enm1Hit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= enemy1 then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if hitStruc ~= nil then
		tempx1 = 1 * 128
		-- empty the group first!
		groupAddGroup(enemy1Guard, enemy1Attack)
		while (groupCountMembers(enemy1Guard) < 4) and (tempx1 <= 1280) do
			groupAddArea(enemy1Guard, enemy1, hitStruc.x - tempx1, hitStruc.y - tempx1, hitStruc.x + tempx1, hitStruc.y + tempx1)
			tempx1 = tempx1 + 32
			-- hack to recalculate members in enemy1Guard!!!
			tempy1 = groupCountMembers(enemy1Attack)
		end
		if attackerObj ~= nil then
			orderGroupObj(enemy1Guard, DORDER_ATTACK, attackerObj)
			orderGroupLoc(enemy1Guard, DORDER_SCOUT, attackerObj.x, attackerObj.y)
		else
			orderGroupLoc(enemy1Guard, DORDER_SCOUT, hitStruc.x, hitStruc.y)
		end
	end
end
callbackEvent(enm1Hit, CALL_STRUCT_ATTACKED)

function enm2Hit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= enemy2 then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if hitStruc ~= nil then
		tempx2 = 1 * 128
		-- empty the group first!
		groupAddGroup(enemy2Guard, enemy2Attack)
		while (groupCountMembers(enemy2Guard) < 4) and (tempx2 <= 1280) do
			groupAddArea(enemy2Guard, enemy2, hitStruc.x - tempx2, hitStruc.y - tempx2, hitStruc.x + tempx2, hitStruc.y + tempx2)
			tempx2 = tempx2 + 32
			-- hack to recalculate members in enemy2Guard!!!
			tempy2 = groupCountMembers(enemy2Attack)
		end
		if attackerObj ~= nil then
			orderGroupObj(enemy2Guard, DORDER_ATTACK, attackerObj)
			orderGroupLoc(enemy2Guard, DORDER_SCOUT, attackerObj.x, attackerObj.y)
		else
			orderGroupLoc(enemy2Guard, DORDER_SCOUT, hitStruc.x, hitStruc.y)
		end
		
		-- then send a repair droid
		-- not dead
		if enemyTruck1 ~= nil then
			orderDroidObj(enemyTruck1, DORDER_REPAIR, hitStruc)
		end
	end
end
callbackEvent(enm2Hit, CALL_STRUCT_ATTACKED)




-- Construction lists

-- now with arrays!!!!

function buildStruc1()
	if enemyTruck1 == nil then
		deactivateEvent(setBuild1)
		deactivateEvent(buildStruc1)
	else
		if comTruck1 < numStruc1 then
			orderDroidStatsLoc(enemyTruck1, DORDER_BUILD, struc1[comTruck1], struc1X[comTruck1], struc1Y[comTruck1])
		end
	end
	repeatingEvent(setBuild1, 3.0)
	deactivateEvent(buildStruc1)
end
delayedEvent(buildStruc1, 30.0)

function setBuild1()
	if enemyTruck1 == nil then
		deactivateEvent(setBuild1)
		deactivateEvent(buildStruc1)
	else
		if enemyTruck1.order == DORDER_NONE then
			comTruck1 = comTruck1 + 1
			repeatingEvent(buildStruc1, 3.0)
			deactivateEvent(setBuild1)
		end
	end
	-- check if finished
	if comTruck1 >= numStruc1 then
		deactivateEvent(setBuild1)
		deactivateEvent(buildStruc1)
	end
end

function warnPlayer()
	playSound(incomingSnd, player)
	pause(20/10.0)
	addMessage(MissionBrief2, MISS_MSG, 0, true)
	deactivateEvent(warnPlayer)
end

-- Get enemy to grab the artifact

function art1EnmTakeEvnt()
	temp1 = groupCountMembers(Recovery1)
	groupAddArea(Recovery2, enemy2, art1X - 171, art1Y - 171, art1X + 171, art1Y + 171)
	-- hack to recalc Recovery1 members also!
	temp2 = groupCountMembers(Recovery2)
	if (temp1 > groupCountMembers(Recovery1)) and (temp2 > 0) then
		if art1ID ~= nil then
			deactivateEvent(art1TakeEvnt)
			-- or seeing it!
			-- setEventTrigger(art1SeenEvnt, inactive);
			deactivateEvent(art1EnmTakeEvnt)
			-- add taker back to group
			-- groupAddGroup(Recovery1, Recovery2);
			-- artTake id the droid with the ball!!!
			groupAddGroup(artGroup, Recovery2)
			-- remove artifact
			destroyFeature(art1ID)
			if not briefFlag then
				briefFlag = true
				delayedEvent(warnPlayer, 0.2)
			end
			-- flag check for all of this group dead, so can drop artifact!!
			repeatingEvent(recoveryDead, 0.5)
			repeatingEvent(enemyWayEvnt, 1.0)
			-- go to LZ hopefully!
			if wayCount < numWay then
				orderGroupLoc(Recovery1, DORDER_SCOUT, wayX[wayCount], wayY[wayCount])
				orderGroupLoc(artGroup, DORDER_MOVE, wayX[wayCount], wayY[wayCount])
			end
		end
	end
end
conditionalEvent(art1EnmTakeEvnt, "droidInRange(enemy2, art1X, art1Y, 171)", 1.0)

function enemyWayEvnt()
	if wayCount < numWay then
		if (groupCountMembers(artGroup) > 0) and (idleGroup(artGroup) == groupCountMembers(artGroup)) then
			wayCount = wayCount + 1
			if wayCount < numWay then
				orderGroupLoc(Recovery1, DORDER_MOVE, wayX[wayCount], wayY[wayCount])
				orderGroupLoc(artGroup, DORDER_MOVE, wayX[wayCount], wayY[wayCount])
			else
				groupAddGroup(Recovery1, Recovery2)
				groupAddGroup(Recovery1, artGroup)
				setGroupSecondary(Recovery1, DSO_HALTTYPE, DSS_HALT_HOLD)
				conditionalEvent(landTrans, "droidInArea(player, 0, 0, 3392, 2368)", 1.0)
				deactivateEvent(enemyWayEvnt)
			end
		end
	else
		deactivateEvent(enemyWayEvnt)
	end
end

function recoveryDead()
	if groupCountMembers(artGroup) == 0 then
		art1ID = addFeature(crate, art1X, art1Y)
		-- allow player to snatch it
		conditionalEvent(art1TakeEvnt, "droidInRange(player, art1X, art1Y, 171)", 1.0)
		-- allow remaining recovery group to snatch it!!
		-- OK on scout?
		orderGroupLoc(Recovery1, DORDER_MOVE, art1X, art1Y)
		deactivateEvent(enemyWayEvnt)
		conditionalEvent(art1EnmTakeEvnt, "droidInRange(enemy2, art1X, art1Y, 171)", 1.0)
		-- need to make a new recovery force to try to snatch it back if all dead(later!)
		deactivateEvent(recoveryDead)
	else
		art1X = artGroup.x
		art1Y = artGroup.y
	end
end

function startGrab()
	orderGroupLoc(Recovery1, DORDER_MOVE, art1X, art1Y)
	deactivateEvent(startGrab2)
	deactivateEvent(startGrab)
end
conditionalEvent(startGrab, "droidInArea(player, 2122, 3392, 7872, 5184)", 1.0)

function startGrab2()
	orderGroupLoc(Recovery1, DORDER_MOVE, art1X, art1Y)
	deactivateEvent(startGrab)
	deactivateEvent(startGrab2)
end
delayedEvent(startGrab2, 120.0)

-- Transports
-- group landed enemy units and get going!
function groupTrans(_Recovery1, _player)
	if _player ~= enemy2 then return end
	deactivateEvent(recoveryDead)
	callbackEvent(gameLost, CALL_TRANSPORTER_OFFMAP)
	-- player has lost, so can't win!
	deactivateEvent(wonYetEvnt)
	
	-- need to make this group vanish along with the artifact group
	-- Recovery1, Recovery2, artGroup;
	
	-- vanish all these!
	initIterateGroup(Recovery1)
	count = 0
	while count < groupCountMembers(Recovery1) do
		loadDroid = iterateGroup(Recovery1)
		vanishUnit(loadDroid)
		count = count + 1
	end
	-- playSound(warnSnd, player);
	playSoundPos(warnSnd, player, 1728, 1472, 0)
	-- text version
	showConsoleText(_("Enemy Escaping"), player)
	pause(10/10.0)
end
callbackEvent(groupTrans, CALL_TRANSPORTER_LANDED)

function landTrans()
	if transportDroid ~= nil then
		transFlag = true
		loadDroid = addDroidToMissionList(template2[0], enemy2)
		if loadDroid ~= nil then
			addDroidToTransporter(transportDroid, loadDroid)
			-- call in transport
			setTransporterExit(enemy2, 32, 62)
			flyTransporterIn(enemy2, 46, 1, false)
		end
	end
	deactivateEvent(landTrans)
end

function LZNoGo()
	if not playerTransOnMap then
		playSoundPos(LZComp, player, 896, 7168, 0)
		-- disable transport landing
		-- (set to 30 mins)
		setReinforcementTime(LZ_COMPROMISED_TIME/10.0)
		-- allow check for clear!
		conditionalEvent(LZ_OK, "(not objectInArea(enemy1, 128, 6400, 1664, 7936)) and (not objectInArea(enemy2, 128, 6400, 1664, 7936))", 3.5)
		deactivateEvent(LZNoGo)
	end
end
conditionalEvent(LZNoGo, "(objectInArea(enemy1, 128, 6400, 1664, 7936)) or (objectInArea(enemy2, 128, 6400, 1664, 7936))", 3.5)

function LZ_OK()
	playSoundPos(LZClear, player, 896, 7168, 0)
	-- allow reinforcements now LZ clear
	-- (set back to normal)
	setReinforcementTime(ReinforceTime/10.0)
	conditionalEvent(LZNoGo, "(objectInArea(enemy1, 128, 6400, 1664, 7936)) or (objectInArea(enemy2, 128, 6400, 1664, 7936))", 3.5)
	deactivateEvent(LZ_OK)
end

function transOn()
	playerTransOnMap = true
end
callbackEvent(transOn, CALL_TRANSPORTER_REINFORCE)

function transOff(_player)
	if _player ~= player then return end
	playerTransOnMap = false
end
callbackEvent(transOff, CALL_TRANSPORTER_OFFMAP)


---------- stubs ----------

if _ == nil then _ = function() print("stub: _"); return 0 end end
if buildingDestroyed == nil then buildingDestroyed = function() print("stub: buildingDestroyed"); return 0 end end
if gameOverMessage == nil then gameOverMessage = function() print("stub: gameOverMessage"); return 0 end end
if orderDroidStatsLoc == nil then orderDroidStatsLoc = function() print("stub: orderDroidStatsLoc"); return 0 end end
if centreView == nil then centreView = function() print("stub: centreView"); return 0 end end
if addFeature == nil then addFeature = function() print("stub: addFeature"); return 0 end end
if enableResearch == nil then enableResearch = function() print("stub: enableResearch"); return 0 end end
if orderGroupObj == nil then orderGroupObj = function() print("stub: orderGroupObj"); return 0 end end
if droidInArea == nil then droidInArea = function() print("stub: droidInArea"); return 0 end end
if numStructsButNotWallsInArea == nil then numStructsButNotWallsInArea = function() print("stub: numStructsButNotWallsInArea"); return 0 end end
if playSoundPos == nil then playSoundPos = function() print("stub: playSoundPos"); return 0 end end
if flashOff == nil then flashOff = function() print("stub: flashOff"); return 0 end end
if anyStructButWallsLeft == nil then anyStructButWallsLeft = function() print("stub: anyStructButWallsLeft"); return 0 end end
if groupAddDroid == nil then groupAddDroid = function() print("stub: groupAddDroid"); return 0 end end
if addDroidToTransporter == nil then addDroidToTransporter = function() print("stub: addDroidToTransporter"); return 0 end end
if groupAddGroup == nil then groupAddGroup = function() print("stub: groupAddGroup"); return 0 end end
if orderGroupLoc == nil then orderGroupLoc = function() print("stub: orderGroupLoc"); return 0 end end
if anyDroidsLeft == nil then anyDroidsLeft = function() print("stub: anyDroidsLeft"); return 0 end end
if droidInRange == nil then droidInRange = function() print("stub: droidInRange"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if initIterateGroup == nil then initIterateGroup = function() print("stub: initIterateGroup"); return 0 end end
if removeMessage == nil then removeMessage = function() print("stub: removeMessage"); return 0 end end
if destroyFeature == nil then destroyFeature = function() print("stub: destroyFeature"); return 0 end end
if setGroupSecondary == nil then setGroupSecondary = function() print("stub: setGroupSecondary"); return 0 end end
if idleGroup == nil then idleGroup = function() print("stub: idleGroup"); return 0 end end
if setReinforcementTime == nil then setReinforcementTime = function() print("stub: setReinforcementTime"); return 0 end end
if setLandingZone == nil then setLandingZone = function() print("stub: setLandingZone"); return 0 end end
if setPowerLevel == nil then setPowerLevel = function() print("stub: setPowerLevel"); return 0 end end
if groupAddArea == nil then groupAddArea = function() print("stub: groupAddArea"); return 0 end end
if setStructureLimits == nil then setStructureLimits = function() print("stub: setStructureLimits"); return 0 end end
if showConsoleText == nil then showConsoleText = function() print("stub: showConsoleText"); return 0 end end
if objectInArea == nil then objectInArea = function() print("stub: objectInArea"); return 0 end end
if killStructsInArea == nil then killStructsInArea = function() print("stub: killStructsInArea"); return 0 end end
if completeResearch == nil then completeResearch = function() print("stub: completeResearch"); return 0 end end
if numDroidsInArea == nil then numDroidsInArea = function() print("stub: numDroidsInArea"); return 0 end end
if startMission == nil then startMission = function() print("stub: startMission"); return 0 end end
if vanishUnit == nil then vanishUnit = function() print("stub: vanishUnit"); return 0 end end
if pause == nil then pause = function() print("stub: pause"); return 0 end end
if setNoGoArea == nil then setNoGoArea = function() print("stub: setNoGoArea"); return 0 end end
if setTransporterExit == nil then setTransporterExit = function() print("stub: setTransporterExit"); return 0 end end
if createAlliance == nil then createAlliance = function() print("stub: createAlliance"); return 0 end end
if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if buildDroid == nil then buildDroid = function() print("stub: buildDroid"); return 0 end end
if flyTransporterIn == nil then flyTransporterIn = function() print("stub: flyTransporterIn"); return 0 end end
if seenStructInArea == nil then seenStructInArea = function() print("stub: seenStructInArea"); return 0 end end
if addMessage == nil then addMessage = function() print("stub: addMessage"); return 0 end end
if iterateGroup == nil then iterateGroup = function() print("stub: iterateGroup"); return 0 end end
if setRadarZoom == nil then setRadarZoom = function() print("stub: setRadarZoom"); return 0 end end
if structureIdle == nil then structureIdle = function() print("stub: structureIdle"); return 0 end end
if addDroidToMissionList == nil then addDroidToMissionList = function() print("stub: addDroidToMissionList"); return 0 end end
if enableStructure == nil then enableStructure = function() print("stub: enableStructure"); return 0 end end
if orderDroidObj == nil then orderDroidObj = function() print("stub: orderDroidObj"); return 0 end end
if centreViewPos == nil then centreViewPos = function() print("stub: centreViewPos"); return 0 end end
if setAssemblyPoint == nil then setAssemblyPoint = function() print("stub: setAssemblyPoint"); return 0 end end
