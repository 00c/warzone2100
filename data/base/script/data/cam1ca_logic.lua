-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
numart = 0
winFlag = 0

-- Briefing stuff
-- , winMsg;

-- required for enemy transports landing
transportDroid = nil
loadDroid = nil
transOnMap = false

-- Win or lose


-- Base Under Attack Stuff
hitStruc = nil
attackerObj = nil
t = 0

-- player Bonus Research topics given at end of mission
-- need to be declared with value >= numResP0, numResP1, etc.
count = 0

-- Reinforcement Lists for New Paradigm
-- limit on number to call in next transport
reinforceType = 0
reinforceCount = 0
transTot = 0
LZ = 0
LZMess = 0
reinforceTemplate = nil
transScout = Group()
transHeavy = Group()
transTemp = Group()
transTemp2 = Group()

-- Map Targets/Waypoints for New Paradigm
-- need 3*numTargets for array, since near, mid and far!
targetChoice = 0
targetType = 0

-- structure limit stuff
-- public	STRUCTURESTAT		powerModuleHack;

-- Starting Technology

-- victory conditions
-- player's starting structures on plateau
startStruc = 0

-- every 10 seconds for retries
-- every 180 secs
-- altered to when an enemy transport lands
-- trigger groupTransTrig(CALL_TRANSPORTER_LANDED, enemy2, transScout);	//wait until transport landed before grouping!
-- trigger obj1Trig(structInArea(player, 7360, 5696, 10688, 8640), 20);


function startEvnt()
	centreViewPos(11 * 128, 52 * 128)
	-- setScrollParams(0, 0, 128, 128);			//limit scroll
	-- set zoom Level 128x128
	setRadarZoom(0)
	-- stop player building on LZ
	initAllNoGoAreas()
	setLandingZone(10, 51, 12, 53)
	-- also don't allow building on 1CA's enemy LZs!
	count = 0
	while count < numLZ do
		setNoGoArea((enemyLZX[count] / 128) - 1, (enemyLZY[count] / 128) - 1, (enemyLZX[count] / 128) + 1, (enemyLZY[count] / 128) + 1, count + 2)
		count = count + 1
	end
	-- make a note of existing structures in case some already built!!!
	-- need to build 4 more of these!!!
	startStruc = numStructsButNotWallsInArea(player, 7360, 5696, 10688, 8640)
	
	-- set no time limits (can carry over from previous missions if not set!)
	setReinforcementTime(-1/10.0)
	-- set Mission time limit
	setMissionTime(timeLimit/10.0)
	
	-- add enemy transport (once!)
	setNoGoArea((enemyLZX[0] / 128) - 1, (enemyLZY[0] / 128) - 1, (enemyLZX[0] / 128) + 1, (enemyLZY[0] / 128) + 1, enemy2)
	transportDroid = addDroidToMissionList(transporter, enemy2)
	
	addMessage(MissionBrief, MISS_MSG, 0, true)
	-- createAlliance(enemy1, enemy2);
	setPowerLevel(pow1, enemy1)
	setPowerLevel(pow2, enemy2)
	deactivateEvent(startEvnt)
	-- Blip Given at start
	addMessage(obj1, PROX_MSG, player, false)
	-- force to recalc
	LZMess = numLZ + 1
	-- targetChoice = 1000;
	-- choose target now so can check for waypoints
	targetChoice = random(numTargets)
	
	-- allow to build stuff
	setStructureLimits(powerGen, numPow, 0)
	setStructureLimits(oilDerrick, numExt, 0)
	setStructureLimits(research, numRes, 0)
	setStructureLimits(factory, numFac, 0)
	setStructureLimits(command, 1, player)
	enableStructure(command, player)
	enableStructure(powerGen, 0)
	enableStructure(oilDerrick, 0)
	enableStructure(research, 0)
	enableStructure(factory, 0)
	-- enableStructure(powerModuleHack, 0);
	-- these need to be researched beforehand!
	-- enableStructure(gunTower,0);
	-- enableStructure(sensorTower,0);
	
	-- player specific technology startups
	count = 0
	while count < numtecE2 do
		completeResearch(tecE2[count], enemy2)
		count = count + 1
	end
	-- make scavengers allies (just so NP doesn't shoot up Scav walls and stuff)
	createAlliance(enemy1, enemy2)
end
callbackEvent(startEvnt, CALL_GAMEINIT)

-- Events: Win or Lose

-- assumes victory already checked
function nextLevEvnt()
	pause(20/10.0)
	-- give bonus research (if req'd)
	count = 0
	while count < numResP0 do
		enableResearch(resP0[count], 0)
		count = count + 1
	end
	
	-- flag next part of map
	C.gameLevel = C.gameLevel + 1
	
	-- removeMessage(MissionBrief, MISS_MSG, player);
	-- SUB1-4A next so BETWEEN rather than OFF_KEEP
	startMission(BETWEEN, NextLev)
	
	-- End game here for now! (don't try next mission)
	-- gameOver(true);
	
	deactivateEvent(nextLevEvnt)
end

function gameLost()
	gameOverMessage(endMsg, MISS_MSG, 0, false)
	deactivateEvent(gameLost)
end

function lostYetEvnt()
	if not anyDroidsLeft(player) then
		if not anyStructButWallsLeft(player) then
			deactivateEvent(wonYetEvnt)
			-- waits 2 seconds before ending
			repeatingEvent(gameLost, 2.0)
			deactivateEvent(lostYetEvnt)
			deactivateEvent(timeUp)
		end
	end
end
repeatingEvent(lostYetEvnt, 0.5)


-- have all enemies lost yet?
function wonYetEvnt()
	if winFlag == 1 then
		if not anyDroidsLeft(enemy2) then
			if not anyStructButWallsLeft(enemy2) then
				deactivateEvent(lostYetEvnt)
				repeatingEvent(nextLevEvnt, 0.5)
				deactivateEvent(wonYetEvnt)
				deactivateEvent(timeUp)
			end
		end
	end
end
conditionalEvent(wonYetEvnt, "(numStructsButNotWallsInArea(player, 7360, 5696, 10688, 8640) >= startStruc + 4)", 2.0)

-- cheat button ctrl M
function cheatEvnt()
	repeatingEvent(nextLevEvnt, 0.5)
	deactivateEvent(cheatEvnt)
end
callbackEvent(cheatEvnt, CALL_MISSION_START)

-- Base Under Attack
function baseHit(_hitStruc, _attackerObj)
	if _hitStruc.player ~= C.selectedPlayer then return end
	hitStruc, attackerObj = _hitStruc, _attackerObj -- wz2lua: probably these can be used as function arguments directly
	if t >= 20 then
		t = 0
		if hitStruc ~= nil then
			playSoundPos(attackSnd1, C.selectedPlayer, hitStruc.x, hitStruc.y, hitStruc.z)
		else
			playSound(attackSnd1, C.selectedPlayer)
		end
	end
end
callbackEvent(baseHit, CALL_STRUCT_ATTACKED)

function everySec()
	t = t + 1
end
repeatingEvent(everySec, 1.0)

function seeBaseHit()
	if hitStruc ~= nil then
		centreView(hitStruc)
		-- flag known about!
		t = 0
	end
end
callbackEvent(seeBaseHit, CALL_MISSION_END)

function removeObj1()
	removeMessage(obj1, PROX_MSG, player)
	deactivateEvent(removeObj1)
end
conditionalEvent(removeObj1, "(numStructsButNotWallsInArea(player, 7360, 5696, 10688, 8640) >= startStruc + 4)", 2.0)

-- group landed enemy units and get going!
function groupTrans(_transTemp, _player)
	if _player ~= enemy2 then return end
	addMessage(enemyLZM[LZ], PROX_MSG, player, false)
	-- store so can remove later
	LZMess = LZ
	-- playSound(warnSnd, player);
	playSoundPos(warnSnd, player, enemyLZX[LZ], enemyLZY[LZ], 0)
	pause(10/10.0)
	-- groupAddArea(transScout, enemy2, enemyLZX[LZ] - 2000, enemyLZY[LZ] - 2000, enemyLZX[LZ] + 2000, enemyLZY[LZ] + 2000);
	if reinforceType == 0 then
		groupAddGroup(transHeavy, transTemp)
		orderGroupLoc(transHeavy, DORDER_SCOUT, targetX[targetChoice], targetY[targetChoice])
	else
		groupAddGroup(transScout, transTemp)
		orderGroupLoc(transScout, DORDER_SCOUT, targetX[targetChoice], targetY[targetChoice])
		-- orderGroupLoc(transScout, DORDER_SCOUT, 12736, 320);
		setGroupRetreatForce(transScout, 75)
		setGroupRetreatLeadership(transScout, 50)
		-- go to top road off map!
		setGroupRetreatPoint(transScout, 12736, 320)
	end
end
callbackEvent(groupTrans, CALL_TRANSPORTER_LANDED)
-- setEventTrigger(groupTrans, inactive);

-- make NP Transport "land"
function NPTransEvnt()
	if transportDroid ~= nil then
		if not transOnMap then
			LZ = random(numLZ)
			-- check no player droids or structures near NP LZ, before landing
			if (not droidInArea(player, enemyLZX[LZ] - 512, enemyLZY[LZ] - 512, enemyLZX[LZ] + 512, enemyLZY[LZ] + 512)) and (not structInArea(player, enemyLZX[LZ] - 512, enemyLZY[LZ] - 512, enemyLZX[LZ] + 512, enemyLZY[LZ] + 512)) and (not droidInArea(enemy2, enemyLZX[LZ] - 200, enemyLZY[LZ] - 200, enemyLZX[LZ] + 200, enemyLZY[LZ] + 200)) and (((reinforceType == 0) and (groupCountMembers(transHeavy) < maxDroid)) or ((reinforceType == 1) and (groupCountMembers(transHeavy) < maxDroid))) then
				if LZMess < numLZ then
					removeMessage(enemyLZM[LZMess], PROX_MSG, player)
				end
				
				-- set Landing Zone
				setNoGoArea((enemyLZX[LZ] / 128) - 1, (enemyLZY[LZ] / 128) - 1, (enemyLZX[LZ] / 128) + 1, (enemyLZY[LZ] / 128) + 1, enemy2)
				if reinforceType == 0 then
					targetChoice = targetChoice + numTargets
					if targetChoice >= numTargets * 3 then
						targetChoice = random(numTargets)
					end
					-- allow win check!
					winFlag = 1
					-- place 8 scouts
					reinforceTemplate = scout[random(numScout)]
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					-- loadDroid = addDroidToMissionList(reinforceTemplate, enemy2);
					-- addDroidToTransporter(transportDroid, loadDroid);
					
					reinforceTemplate = scout[random(numScout)]
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					-- loadDroid = addDroidToMissionList(reinforceTemplate, enemy2);
					-- addDroidToTransporter(transportDroid, loadDroid);
					
					if targetChoice >= numTargets / 3 then
						reinforceTemplate = scout[random(numScout)]
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
					end
					if targetChoice >= 2 * numTargets / 3 then
						reinforceTemplate = scout[random(numScout)]
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
					end
					reinforceType = 1
					-- 1 min
					repeatingEvent(NPTransEvnt, 90.0)
				else
					reinforceTemplate = heavy[random(numHeavy)]
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					-- loadDroid = addDroidToMissionList(reinforceTemplate, enemy2);
					-- addDroidToTransporter(transportDroid, loadDroid);
					
					reinforceTemplate = heavy[random(numHeavy)]
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
					if loadDroid ~= nil then
						addDroidToTransporter(transportDroid, loadDroid)
					end
					-- loadDroid = addDroidToMissionList(reinforceTemplate, enemy2);
					-- addDroidToTransporter(transportDroid, loadDroid);
					
					if targetChoice >= numTargets / 3 then
						reinforceTemplate = heavy[random(numHeavy)]
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
					end
					if targetChoice >= 2 * numTargets / 3 then
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
						loadDroid = addDroidToMissionList(reinforceTemplate, enemy2)
						if loadDroid ~= nil then
							addDroidToTransporter(transportDroid, loadDroid)
						end
					end
					reinforceType = 0
					-- 2 mins
					repeatingEvent(NPTransEvnt, 180.0)
				end
				-- groupAddArea(transHeavy, enemy2, enemyLZX[LZ] - 128, enemyLZY[LZ] - 128, enemyLZX[LZ] + 128, enemyLZY[LZ] + 128);
				-- orderGroupLoc(transHeavy, DORDER_SCOUT, targetX[targetChoice], targetY[targetChoice]);
				
				-- call in transport, using random-ish positions
				setTransporterExit(enemy2, 126, 1 + random(126))
				flyTransporterIn(enemy2, 126, 1 + random(126), false)
				transOnMap = true
				-- setEventTrigger(groupTrans, groupTransTrig);	//allow grouping when it lands
				
				-- keep track of number of transports done so far!
				transTot = transTot + 1
			else
				repeatingEvent(NPTransEvnt, 10.0)
			end
			if transTot > 10 then
				winFlag = 1
				-- don't allow any more!
				deactivateEvent(NPTransEvnt)
			end
		end
	else
		winFlag = 1
		-- don't allow any more!
		deactivateEvent(NPTransEvnt)
	end
end
repeatingEvent(NPTransEvnt, 10.0)

-- (inactive)
function moveTrans()
	groupAddArea(transTemp, enemy2, targetX[targetChoice] - 512, targetY[targetChoice] - 512, targetX[targetChoice] + 512, targetY[targetChoice] + 512)
	if groupCountMembers(transTemp) > 0 then
		targetChoice = targetChoice + numTargets
		if targetChoice >= numTargets * 3 then
			targetChoice = random(numTargets)
		end
		groupAddGroup(transScout, transTemp)
		-- get going to next one!!
		orderGroupLoc(transScout, DORDER_SCOUT, targetX[targetChoice], targetY[targetChoice])
	end
	
	-- have Heavies got close to target?
	groupAddArea(transTemp, enemy2, targetX[targetChoice] - 512, targetY[targetChoice] - 512, targetX[targetChoice] + 512, targetY[targetChoice] + 512)
	if groupCountMembers(transTemp) > 0 then
		targetChoice = targetChoice + numTargets
		if targetChoice >= numTargets * 3 then
			targetChoice = random(numTargets)
		end
		groupAddGroup(transHeavy, transTemp)
		-- get going to next one!!
		orderGroupLoc(transHeavy, DORDER_SCOUT, targetX[targetChoice], targetY[targetChoice])
	end
end
repeatingEvent(moveTrans, 8.8)


function transOff(_player)
	if _player ~= enemy2 then return end
	transOnMap = false
end
callbackEvent(transOff, CALL_TRANSPORTER_OFFMAP)


function timeUp()
	deactivateEvent(wonYetEvnt)
	deactivateEvent(lostYetEvnt)
	repeatingEvent(gameLost, 2.0)
	deactivateEvent(timeUp)
end
callbackEvent(timeUp, CALL_MISSION_TIME)


---------- stubs ----------

if gameOverMessage == nil then gameOverMessage = function() print("stub: gameOverMessage"); return 0 end end
if centreView == nil then centreView = function() print("stub: centreView"); return 0 end end
if random == nil then random = function() print("stub: random"); return 0 end end
if enableResearch == nil then enableResearch = function() print("stub: enableResearch"); return 0 end end
if droidInArea == nil then droidInArea = function() print("stub: droidInArea"); return 0 end end
if setTransporterExit == nil then setTransporterExit = function() print("stub: setTransporterExit"); return 0 end end
if setMissionTime == nil then setMissionTime = function() print("stub: setMissionTime"); return 0 end end
if anyStructButWallsLeft == nil then anyStructButWallsLeft = function() print("stub: anyStructButWallsLeft"); return 0 end end
if addDroidToTransporter == nil then addDroidToTransporter = function() print("stub: addDroidToTransporter"); return 0 end end
if initAllNoGoAreas == nil then initAllNoGoAreas = function() print("stub: initAllNoGoAreas"); return 0 end end
if orderGroupLoc == nil then orderGroupLoc = function() print("stub: orderGroupLoc"); return 0 end end
if anyDroidsLeft == nil then anyDroidsLeft = function() print("stub: anyDroidsLeft"); return 0 end end
if startMission == nil then startMission = function() print("stub: startMission"); return 0 end end
if pause == nil then pause = function() print("stub: pause"); return 0 end end
if removeMessage == nil then removeMessage = function() print("stub: removeMessage"); return 0 end end
if setGroupRetreatPoint == nil then setGroupRetreatPoint = function() print("stub: setGroupRetreatPoint"); return 0 end end
if setReinforcementTime == nil then setReinforcementTime = function() print("stub: setReinforcementTime"); return 0 end end
if setLandingZone == nil then setLandingZone = function() print("stub: setLandingZone"); return 0 end end
if setPowerLevel == nil then setPowerLevel = function() print("stub: setPowerLevel"); return 0 end end
if addDroidToMissionList == nil then addDroidToMissionList = function() print("stub: addDroidToMissionList"); return 0 end end
if setStructureLimits == nil then setStructureLimits = function() print("stub: setStructureLimits"); return 0 end end
if playSoundPos == nil then playSoundPos = function() print("stub: playSoundPos"); return 0 end end
if completeResearch == nil then completeResearch = function() print("stub: completeResearch"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if setNoGoArea == nil then setNoGoArea = function() print("stub: setNoGoArea"); return 0 end end
if numStructsButNotWallsInArea == nil then numStructsButNotWallsInArea = function() print("stub: numStructsButNotWallsInArea"); return 0 end end
if createAlliance == nil then createAlliance = function() print("stub: createAlliance"); return 0 end end
if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if flyTransporterIn == nil then flyTransporterIn = function() print("stub: flyTransporterIn"); return 0 end end
if groupAddGroup == nil then groupAddGroup = function() print("stub: groupAddGroup"); return 0 end end
if structInArea == nil then structInArea = function() print("stub: structInArea"); return 0 end end
if addMessage == nil then addMessage = function() print("stub: addMessage"); return 0 end end
if setRadarZoom == nil then setRadarZoom = function() print("stub: setRadarZoom"); return 0 end end
if groupAddArea == nil then groupAddArea = function() print("stub: groupAddArea"); return 0 end end
if enableStructure == nil then enableStructure = function() print("stub: enableStructure"); return 0 end end
if centreViewPos == nil then centreViewPos = function() print("stub: centreViewPos"); return 0 end end
if setGroupRetreatForce == nil then setGroupRetreatForce = function() print("stub: setGroupRetreatForce"); return 0 end end
if setGroupRetreatLeadership == nil then setGroupRetreatLeadership = function() print("stub: setGroupRetreatLeadership"); return 0 end end
