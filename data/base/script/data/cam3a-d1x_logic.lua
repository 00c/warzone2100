-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
-- Missile silo object
uplinkX = Array(3)
uplinkY = Array(3)
tempX = 0
tempY = 0
temp = 0
lasX1 = 0
lasX2 = 0
lasY1 = 0
lasY2 = 0
yMax = 0
switch1 = 0
switch2 = 0
chance = 0
-- private		STRUCTURE	target;
target = nil
flag = false
numTargets = 0
targets = Array(13)
res = 0
count = 0
uplinkPlayer = 0
researchDone = nil

-- every 15 seconds
-- every 20 seconds

-- every 5 seconds	//from N of 3B to N of 3A	(10mins on 3B)
-- every 25 seconds	//from N of 3A to N of 3C	(50 mins on 3A)
-- every 25 seconds	//from N of 3C to N of 3D	(Not actually used!!)


function start()
	if silo[0] ~= nil then
		uplinkX[0] = silo[0].x
		uplinkY[0] = silo[0].y
		uplinkX[1] = silo[1].x
		uplinkY[1] = silo[1].y
		uplinkX[2] = silo[2].x
		uplinkY[2] = silo[2].y
		uplinkPlayer = silo[0].player
		-- ally player with uplink
		createAlliance(player, uplinkPlayer)
		-- ally Enemy with uplink
		createAlliance(enemy, uplinkPlayer)
	end
	
	-- set LasSat area limits (change later)
	lasX1 = 64
	-- 3B only (get to 3AB later)
	lasY1 = 64
	lasX2 = 8000
	-- 8000;
	lasY2 = 128
	-- starting chance to hit %age
	chance = 50
	-- 24576;	//allow 3A-B
	yMax = 16384
	-- when switches speed for covering 3A
	switch1 = 8192
	-- when switches speed for covering 3C
	switch2 = 16384
	-- setup target types
	numTargets = 13
	-- use wall more than anything else so picks more often
	-- ST_WALL
	targets[0] = ST_HQ
	targets[1] = ST_FACTORY
	targets[2] = ST_POWER_GEN
	targets[3] = ST_RESOURCE_EXTRACTOR
	targets[4] = ST_WALL
	targets[5] = ST_RESEARCH
	targets[6] = ST_REPAIR_FACILITY
	targets[7] = ST_COMMAND_CONTROL
	targets[8] = ST_CYBORG_FACTORY
	-- ST_WALL
	targets[9] = ST_VTOL_FACTORY
	targets[10] = ST_REARM_PAD
	targets[11] = ST_SENSOR
	targets[12] = ST_DEF_ALL
end
callbackEvent(start, CALL_GAMEINIT)

function clearMessage()
	flushConsoleMessages()
	deactivateEvent(clearMessage)
end

-- need to check this again later (with different structure IDs, since player number has changed!!!)
function captureDeadEvnt()
	deactivateEvent(captureEvnt)
	-- need to play audio if possible
	addConsoleText(_("Objective Destroyed"), player)
	playSound(failedSnd, player)
	pause(20/10.0)
	C.extraFailFlag = true
	deactivateEvent(captureDeadEvnt)
end
conditionalEvent(captureDeadEvnt, "((destroyed(silo[0])) and (destroyed(silo[1])) and (destroyed(silo[2])))", 1.7)

function captureEvnt()
	if (numDroidsInArea(enemy, uplinkX[0] - capRange, uplinkY[0] - capRange, uplinkX[0] + capRange, uplinkY[0] + capRange) == 0) and (numStructsByTypeInArea(enemy, REF_DEFENSE, uplinkX[0] - capRange, uplinkY[0] - capRange, uplinkX[0] + capRange, uplinkY[0] + capRange) == 0) then
		deactivateEvent(captureDeadEvnt)
		-- convert structure to player ownership now script function exists
		-- takeOverStructsInArea(uplinkPlayer, player, uplinkX[0] - 1280, uplinkY[0] - 1280, uplinkX[0] + 1280, uplinkY[0] + 1280);
		
		-- new way to take over structures whilst keeping ID same
		count = 0
		while count < 3 do
			if silo[count] ~= nil then
				takeOverSingleStructure(silo[count], player)
			end
			count = count + 1
		end
		
		-- need to play Audio if possible?
		playSound(capturedSnd, player)
		showConsoleText(_("Objective Captured"), player)
		pause(20/10.0)
		C.extraVictoryFlag = true
		deactivateEvent(captureEvnt)
	end
end
conditionalEvent(captureEvnt, "(droidInRange(player, uplinkX[0], uplinkY[0], 300) and ((silo[0] ~= nil) or (silo[1] ~= nil) or (silo[2] ~= nil)))", 1.3)

-- every 5 seconds
function fireLasSat()
	resetStructTargets()
	-- pick random target type preference
	setStructTarPref(targets[random(numTargets)])
	-- setStructTarPref(targets[4]);		//pick walls to check
	target = structTargetInArea(player, -1, lasX1, lasY1, lasX2, lasY2)
	-- if no structures to hit go for Droids
	if target == nil then
		resetDroidTargets()
		target = droidTargetInArea(player, -1, lasX1, lasY1, lasX2, lasY2)
	end
	if target ~= nil then
		if random(100) < chance then
			tempX = target.x
			tempY = target.y
			-- hit target
			fireWeaponAtObj(lasSat, target)
		else
			tempX = target.x - 512 + random(1024)
			tempY = target.y - 512 + random(1024)
			flag, tempX, tempY = pickStructLocation(testStat, tempX, tempY, player)
			if flag then
				tempX = tempX - 64 + random(128)
				tempY = tempY - 64 + random(128)
				fireWeaponAtLoc(lasSat, tempX, tempY)
			else
				tempX = target.x - 512 + random(1024)
				-- 4 tiles either side
				tempY = target.y - 512 + random(1024)
				fireWeaponAtLoc(lasSat, tempX, tempY)
			end
		end
	else
		tempX = lasX1 + random(lasX2 - lasX1)
		tempY = lasY1 + random(lasY2 - lasY1)
		fireWeaponAtLoc(lasSat, tempX, tempY)
	end
	
	-- warn player that lassat has fired!
	if random(100) < 50 then
		playSoundPos(warnSatSnd, C.selectedPlayer, tempX, tempY, 0)
	end
	
	-- set random time for next firing
	temp = random(4)
	if temp == 0 then
		delayedEvent(fireLasSat, 5.0)
	else
		if temp == 1 then
			delayedEvent(fireLasSat, 10.0)
		else
			if temp == 2 then
				delayedEvent(fireLasSat, 15.0)
			else
				delayedEvent(fireLasSat, 20.0)
			end
		end
	end
end
delayedEvent(fireLasSat, 5.0)

-- every 10 seconds
function moveSat()
	if lasY2 < yMax then
		lasY2 = lasY2 + 128
		-- lasY1 = lasY1 + 64; //add another 1/2 tile to limit, so stops targetting north so much
		
		-- slow down for covering 3A
		if lasY2 > switch1 then
			repeatingEvent(moveSat, 25.0)
			switch1 = 100000
		end
		-- slow down for covering 3C
		if lasY2 > switch2 then
			repeatingEvent(moveSat, 25.0)
			switch2 = 100000
		end
	end
end
repeatingEvent(moveSat, 5.0)


---------- stubs ----------

if random == nil then random = function() print("stub: random"); return 0 end end
if resetStructTargets == nil then resetStructTargets = function() print("stub: resetStructTargets"); return 0 end end
if setStructTarPref == nil then setStructTarPref = function() print("stub: setStructTarPref"); return 0 end end
if createAlliance == nil then createAlliance = function() print("stub: createAlliance"); return 0 end end
if pickStructLocation == nil then pickStructLocation = function() print("stub: pickStructLocation"); return 0 end end
if resetDroidTargets == nil then resetDroidTargets = function() print("stub: resetDroidTargets"); return 0 end end
if droidInRange == nil then droidInRange = function() print("stub: droidInRange"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if takeOverSingleStructure == nil then takeOverSingleStructure = function() print("stub: takeOverSingleStructure"); return 0 end end
if destroyed == nil then destroyed = function() print("stub: destroyed"); return 0 end end
if droidTargetInArea == nil then droidTargetInArea = function() print("stub: droidTargetInArea"); return 0 end end
if showConsoleText == nil then showConsoleText = function() print("stub: showConsoleText"); return 0 end end
if playSoundPos == nil then playSoundPos = function() print("stub: playSoundPos"); return 0 end end
if numDroidsInArea == nil then numDroidsInArea = function() print("stub: numDroidsInArea"); return 0 end end
if pause == nil then pause = function() print("stub: pause"); return 0 end end
if fireWeaponAtObj == nil then fireWeaponAtObj = function() print("stub: fireWeaponAtObj"); return 0 end end
if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if addConsoleText == nil then addConsoleText = function() print("stub: addConsoleText"); return 0 end end
if _ == nil then _ = function() print("stub: _"); return 0 end end
if numStructsByTypeInArea == nil then numStructsByTypeInArea = function() print("stub: numStructsByTypeInArea"); return 0 end end
if structTargetInArea == nil then structTargetInArea = function() print("stub: structTargetInArea"); return 0 end end
if flushConsoleMessages == nil then flushConsoleMessages = function() print("stub: flushConsoleMessages"); return 0 end end
if fireWeaponAtLoc == nil then fireWeaponAtLoc = function() print("stub: fireWeaponAtLoc"); return 0 end end
