-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
count = 0
flag = false

-- the player side

-- the computer sides

-- the specific mission target buildings
tarGone = Array(5)
msgAdded = false

-- the target area

-- the briefing from the first part of the mission
-- the briefing message once the silos are dead
-- the proximity message for the hide location

-- the time for the next mission

-- the wav to play for the second bit of the mission

droid = nil
struct = nil

-- valley areas
temp = 0
deadGroup = Group()

-- pause before playing the 1B breifing


function start()
	setScrollParams(0, 32, 64, 64)
	-- add the blip over the uplink sensor
	addMessage(targets, PROX_MSG, player, false)
	tarGone[0] = false
	msgAdded = false
	-- we don't want the coded countdown
	setPlayCountDown(false)
end
callbackEvent(start, CALL_GAMEINIT)


function playBrief2()
	removeMessage(cam3_1ABrief, MISS_MSG, player)
	-- remove earlier bit
	removeMessage(briefing, MISS_MSG, player)
	-- summary to keep
	addMessage(briefing2, MISS_MSG, player, true)
	pause(20/10.0)
	setMissionTime(secondMissionTime/10.0)
	deactivateEvent(playBrief2)
end

-- play the mission breifing for 1B
function playBriefing()
	callbackEvent(playBrief2, CALL_VIDEO_QUIT)
	addMessage(briefing, MISS_MSG, player, true)
	
	-- set the reinforcement time to -1 so that the timer widget disappears
	setReinforcementTime(-1/10.0)
	-- set up the proximity message for the hideaway location
	addMessage(hideLocBlip, PROX_MSG, player, false)
	
	setScrollParams(0, 0, 64, 64)
	-- allow valley checks
	repeatingEvent(checkValley, 5.5)
	conditionalEvent(nuke, "(missionTimeRemaining() <= 50)", 0.5)
end

-- check to see if all the missile silos are dead
function silosDead()
	count = 0
	flag = true
	while count < numTargets do
		if tarStructs[count] ~= nil then
			flag = false
		end
		--[[else if ( (not tarGone[count]) and
						  ((count == 0) or (msgAdded)) )
				{
					removeMessage(targets[count], PROX_MSG, player);
					tarGone[count] = TRUE;
				}]]--
		count = count + 1
	end
	
	if flag then
		removeMessage(targets, PROX_MSG, player)
		-- extraVictoryFlag = TRUE;
		playSound(missileAbort, player)
		setMissionTime(-1/10.0)
		deactivateEvent(silosDead)
		delayedEvent(playBriefing, 3.0)
	end
end
repeatingEvent(silosDead, 2.1)

function checkValley()
	temp = 0
	count = 0
	while count < numSafe do
		temp = temp + numDroidsInArea(player, safeX1[count], safeY1[count], safeX2[count], safeY2[count])
		count = count + 1
	end
	-- all units safe
	if (temp == getDroidCount(player)) and (getDroidCount(player) > 0) then
		C.extraVictoryFlag = true
		deactivateEvent(checkValley)
	end
end

function nuke()
	count = 0
	temp = 0
	while count < numSafe do
		temp = temp + numDroidsInArea(player, safeX1[count], safeY1[count], safeX2[count], safeY2[count])
		count = count + 1
	end
	
	-- some units safe
	if temp > 0 then
		C.extraVictoryFlag = true
		pause(35/10.0)
		
		-- new system
		count = 0
		while count < numDead do
			killDroidsInArea(deadX1[count], deadY1[count], deadX2[count], deadY2[count], player)
			-- killDroidsInArea(deadX1[count], deadY1[count], deadX2[count], deadY2[count], enemy);
			count = count + 1
		end
		-- oneshot
		deactivateEvent(nuke)
	end
end


---------- stubs ----------

if pause == nil then pause = function() print("stub: pause"); return 0 end end
if addMessage == nil then addMessage = function() print("stub: addMessage"); return 0 end end
if removeMessage == nil then removeMessage = function() print("stub: removeMessage"); return 0 end end
if killDroidsInArea == nil then killDroidsInArea = function() print("stub: killDroidsInArea"); return 0 end end
if getDroidCount == nil then getDroidCount = function() print("stub: getDroidCount"); return 0 end end
if numDroidsInArea == nil then numDroidsInArea = function() print("stub: numDroidsInArea"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if setScrollParams == nil then setScrollParams = function() print("stub: setScrollParams"); return 0 end end
if setPlayCountDown == nil then setPlayCountDown = function() print("stub: setPlayCountDown"); return 0 end end
if setReinforcementTime == nil then setReinforcementTime = function() print("stub: setReinforcementTime"); return 0 end end
if setMissionTime == nil then setMissionTime = function() print("stub: setMissionTime"); return 0 end end
if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if missionTimeRemaining == nil then missionTimeRemaining = function() print("stub: missionTimeRemaining"); return 0 end end
