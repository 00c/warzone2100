-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for
-- Missile silo object
silo = Array(3)
uplinkX = Array(3)
uplinkY = Array(3)
tempX = 0
tempY = 0
temp = 0
lasX1 = 0
lasX2 = 0
lasY1 = 0
lasY2 = 0
yMax = 0
chance = 0
-- private		STRUCTURE	target;
target = nil
flag = false
numTargets = 0
targets = Array(13)
res = 0
-- player research topics for missile codes
count = 0
uplinkPlayer = 0
researchDone = nil
grpGroup = Array(1)
droid = nil
testStruc = nil
structure = nil

-- every 20 seconds
-- every 25 seconds

-- every 31.8 seconds (1hr 8min to cover 3AD)


function start()
	setScrollMinY(126)
	-- setScrollParams(0, 64, 58, 256);
	
	-- need to give player research for NEXUS intruder program
	-- keeps track of research to test done
	res = 0
	enableResearch(playerRes[res], player)
	
	-- set LasSat area limits (change later)
	lasX1 = 64
	-- 3A and B
	lasY1 = 16000
	lasX2 = 8000
	lasY2 = 16384
	-- starting chance to hit %age
	chance = 50
	-- allow LasSats to hit gamma base
	-- allow 3AD!!	//24576;
	yMax = 32576
	-- setup target types
	numTargets = 13
	-- use wall more than anything else so picks more often
	-- ST_WALL
	targets[0] = ST_HQ
	targets[1] = ST_FACTORY
	targets[2] = ST_POWER_GEN
	targets[3] = ST_RESOURCE_EXTRACTOR
	targets[4] = ST_WALL
	targets[5] = ST_RESEARCH
	targets[6] = ST_REPAIR_FACILITY
	targets[7] = ST_COMMAND_CONTROL
	targets[8] = ST_CYBORG_FACTORY
	-- ST_WALL
	targets[9] = ST_VTOL_FACTORY
	targets[10] = ST_REARM_PAD
	targets[11] = ST_SENSOR
	targets[12] = ST_DEF_ALL
end
callbackEvent(start, CALL_GAMEINIT)

function nukeEm()
	count = 0
	while count < 20 do
		killStructsInArea(player, count, 0, 0, 8128, 16384, false, false)
		count = count + 1
	end
	-- need to nuke all player units in 3AB
	killDroidsInArea(0, 0, 8128, 16384, player)
end
delayedEvent(nukeEm, 0.5)

-- to check if player no longer has the silos
function captureDeadEvnt()
	deactivateEvent(resDone)
	deactivateEvent(missileLaunch)
	-- need to play audio if possible
	addConsoleText(_("Objective Destroyed"), player)
	playSound(failedSnd, player)
	pause(20/10.0)
	C.extraFailFlag = true
	deactivateEvent(captureDeadEvnt)
end

function allowLose()
	initEnumStruct(false, siloStat, player, player)
	testStruc = enumStruct()
	count = 0
	while (testStruc ~= nil) and (count < 3) do
		silo[count] = testStruc
		-- playSound(failedSnd, player);
		count = count + 1
		testStruc = enumStruct()
	end
	conditionalEvent(captureDeadEvnt, "((silo[0] == nil) and (silo[1] == nil) and (silo[2] == nil))", 1.7)
end
delayedEvent(allowLose, 2.0)

function clearMessage()
	flushConsoleMessages()
	deactivateEvent(clearMessage)
end

-- wait 5mins
function nexusGo()
	addMessage(brief2, MISS_MSG, 0, true)
	-- set timelimit
	setMissionTime(timeLimit/10.0)
end
delayedEvent(nexusGo, 295.0)
-- Start Las Sat firing
-- setEventTrigger(fireLasSat, fireLasSatTrig);

function missileLaunch()
	C.extraVictoryFlag = true
	-- addMessage(winMsg, MISS_MSG, 0, true);
	deactivateEvent(fireLasSat)
end

function resDone(_researchDone, _structure, _player)
	researchDone, structure = _researchDone, _structure -- wz2lua: probably these can be used as function arguments directly
	if researchDone == playerRes[res] then
		if res < 3 then
			addMessage(resMsg[res], MISS_MSG, 0, true)
			res = res + 1
			-- enable the next research topic
			enableResearch(playerRes[res], player)
		else
			if res >= 3 then
				addMessage(resMsg[res], MISS_MSG, 0, true)
				delayedEvent(missileLaunch, 2.0)
				deactivateEvent(resDone)
			end
		end
	end
end
callbackEvent(resDone, CALL_RESEARCHCOMPLETED)


function fireLasSat()
	resetStructTargets()
	-- pick random target type preference
	setStructTarPref(targets[random(numTargets)])
	-- setStructTarPref(targets[4]);		//pick walls to check
	target = structTargetInArea(player, -1, lasX1, lasY1, lasX2, lasY2)
	-- if no structures to hit go for Droids
	if target == nil then
		resetDroidTargets()
		target = droidTargetInArea(player, -1, lasX1, lasY1, lasX2, lasY2)
	end
	if target ~= nil then
		if random(100) < chance then
			tempX = target.x
			tempY = target.y
			-- hit target
			fireWeaponAtObj(lasSat, target)
		else
			tempX = target.x - 512 + random(1024)
			tempY = target.y - 512 + random(1024)
			flag, tempX, tempY = pickStructLocation(testStat, tempX, tempY, player)
			if flag then
				tempX = tempX - 64 + random(128)
				tempY = tempY - 64 + random(128)
				fireWeaponAtLoc(lasSat, tempX, tempY)
			else
				tempX = target.x - 512 + random(1024)
				tempY = target.y - 512 + random(1024)
				fireWeaponAtLoc(lasSat, tempX, tempY)
			end
		end
	else
		tempX = lasX1 + random(lasX2 - lasX1)
		tempY = lasY1 + random(lasY2 - lasY1)
		fireWeaponAtLoc(lasSat, tempX, tempY)
	end
	
	-- warn player that lassat has fired!
	if random(100) < 50 then
		playSoundPos(warnSatSnd, C.selectedPlayer, tempX, tempY, 0)
	end
	
	-- set random time for next firing
	temp = random(4)
	if temp == 0 then
		delayedEvent(fireLasSat, 10.0)
	else
		if temp == 1 then
			delayedEvent(fireLasSat, 15.0)
		else
			if temp == 2 then
				delayedEvent(fireLasSat, 20.0)
			else
				delayedEvent(fireLasSat, 25.0)
			end
		end
	end
end
delayedEvent(fireLasSat, 10.0)

function moveSat()
	if lasY2 < yMax then
		lasY2 = lasY2 + 128
	end
end
repeatingEvent(moveSat, 31.8)


---------- stubs ----------

if enumStruct == nil then enumStruct = function() print("stub: enumStruct"); return 0 end end
if random == nil then random = function() print("stub: random"); return 0 end end
if enableResearch == nil then enableResearch = function() print("stub: enableResearch"); return 0 end end
if resetStructTargets == nil then resetStructTargets = function() print("stub: resetStructTargets"); return 0 end end
if setStructTarPref == nil then setStructTarPref = function() print("stub: setStructTarPref"); return 0 end end
if setMissionTime == nil then setMissionTime = function() print("stub: setMissionTime"); return 0 end end
if pickStructLocation == nil then pickStructLocation = function() print("stub: pickStructLocation"); return 0 end end
if pause == nil then pause = function() print("stub: pause"); return 0 end end
if resetDroidTargets == nil then resetDroidTargets = function() print("stub: resetDroidTargets"); return 0 end end
if droidTargetInArea == nil then droidTargetInArea = function() print("stub: droidTargetInArea"); return 0 end end
if playSoundPos == nil then playSoundPos = function() print("stub: playSoundPos"); return 0 end end
if killStructsInArea == nil then killStructsInArea = function() print("stub: killStructsInArea"); return 0 end end
if initEnumStruct == nil then initEnumStruct = function() print("stub: initEnumStruct"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if fireWeaponAtObj == nil then fireWeaponAtObj = function() print("stub: fireWeaponAtObj"); return 0 end end
if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if addConsoleText == nil then addConsoleText = function() print("stub: addConsoleText"); return 0 end end
if _ == nil then _ = function() print("stub: _"); return 0 end end
if setScrollMinY == nil then setScrollMinY = function() print("stub: setScrollMinY"); return 0 end end
if addMessage == nil then addMessage = function() print("stub: addMessage"); return 0 end end
if structTargetInArea == nil then structTargetInArea = function() print("stub: structTargetInArea"); return 0 end end
if flushConsoleMessages == nil then flushConsoleMessages = function() print("stub: flushConsoleMessages"); return 0 end end
if killDroidsInArea == nil then killDroidsInArea = function() print("stub: killDroidsInArea"); return 0 end end
if fireWeaponAtLoc == nil then fireWeaponAtLoc = function() print("stub: fireWeaponAtLoc"); return 0 end end
