-- Generated by wz2lua (implementation file)
version(0) --- version of the script API this script is written for

-- how many stages for the countdown

-- what times to play each sound for the countdown

-- the sounds to play as each time point is reached
-- the first dimension controls which sound set is used

timeLeft = 0
currStage = 0
currSoundSet = 0
prevTime = 0
done = false


-- pause between testing for the next sound


function start()
	delayedEvent(initStage, 0.0)
end
callbackEvent(start, CALL_GAMEINIT)
-- currSoundSet = -1;

-- setup the correct stage level for the event timer
function initStage()
	if currSoundSet >= numSoundSets then
		currSoundSet = 0
	end
	
	-- skip down to the current sound set
	currStage = numStages[currSoundSet] - 1
	timeLeft = missionTimeRemaining()
	prevTime = timeLeft
	repeatingEvent(timeReset, 2.0)
	
	done = false
	while not done do
		if currStage >= 0 then
			if timeLeft <= stageTime[currSoundSet][currStage] then
				currStage = currStage - 1
			else
				done = true
			end
		else
			done = true
		end
	end
	
	repeatingEvent(playStageSound, 0.5)
end

-- see if the time for the next stage has been reached
function playStageSound()
	if currStage >= 0 then
		if (timeLeft <= stageTime[currSoundSet][currStage]) and (timeLeft ~= 0) then
			playSound(stageSound[currSoundSet][currStage], player)
			currStage = currStage - 1
		end
	end
end


function timeReset()
	timeLeft = missionTimeRemaining()
	-- test for the mission timer being reset
	if timeLeft > prevTime then
		currSoundSet = currSoundSet + 1
		deactivateEvent(playStageSound)
		delayedEvent(initStage, 0.0)
	end
	prevTime = timeLeft
end


---------- stubs ----------

if playSound == nil then playSound = function() print("stub: playSound"); return 0 end end
if setEventTrigger == nil then setEventTrigger = function() print("stub: setEventTrigger"); return 0 end end
if missionTimeRemaining == nil then missionTimeRemaining = function() print("stub: missionTimeRemaining"); return 0 end end
